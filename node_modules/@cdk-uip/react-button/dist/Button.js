"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * - To handle clicks add an `onClick` prop.
 * - Any props not listed will be passed through to the underlying element.
 */
var Button = function Button(_ref) {
  var raised = _ref.raised,
      dense = _ref.dense,
      accent = _ref.accent,
      className = _ref.className,
      children = _ref.children,
      link = _ref.link,
      primary = _ref.primary,
      unelevated = _ref.unelevated,
      outlined = _ref.outlined,
      buttonRef = _ref.buttonRef,
      other = _objectWithoutProperties(_ref, ["raised", "dense", "accent", "className", "children", "link", "primary", "unelevated", "outlined", "buttonRef"]);

  var T = link ? "a" : "button";
  return _react2.default.createElement(
    T,
    _extends({
      className: (0, _classnames2.default)("mdc-button", {
        "mdc-button--raised": raised,
        "mdc-button--dense": dense,
        "mdc-button--primary": primary,
        "mdc-button--unelevated": unelevated,
        "mdc-button--outlined": outlined
      }, className),
      ref: buttonRef
    }, other),
    children
  );
};

Button.propTypes = {
  /** Primary button */
  primary: _propTypes.bool,
  /** Raised button. */
  raised: _propTypes.bool,
  /** Dense button. */
  dense: _propTypes.bool,
  /** Render the button as a link */
  link: _propTypes.bool,
  /** Flush with the surface */
  unelevated: _propTypes.bool,
  /** Flush with the surface with a visible border */
  outlined: _propTypes.bool,
  /** Pass a callback ref to get ref of underlying button DOM node */
  buttonRef: _propTypes.func
};

Button.defaultProps = {
  buttonRef: function buttonRef() {}
};

exports.default = Button;