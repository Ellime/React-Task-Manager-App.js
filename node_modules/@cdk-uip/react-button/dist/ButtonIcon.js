"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactIcon = require("@cdk-uip/react-icon");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Used to display icons within suitable for use with `<Button>` components.
 *
 * If you create your own icon components then you can use this to ensure the
 * correct classname is applied.
 */
var ButtonIcon = function ButtonIcon(_ref) {
  var className = _ref.className,
      other = _objectWithoutProperties(_ref, ["className"]);

  return _react2.default.createElement(_reactIcon.Icon, _extends({ className: (0, _classnames2.default)("mdc-button__icon", className) }, other));
};

exports.default = ButtonIcon;