import React from "react";
import { Button, ButtonIcon } from ".";
import renderer from "react-test-renderer";
import TestUtils from "react-dom/test-utils";

it("renders flat", () => {
  expect(renderer.create(<Button>Label</Button>)).toMatchSnapshot();
});

it("renders raised", () => {
  expect(renderer.create(<Button raised>Label</Button>)).toMatchSnapshot();
});

it("renders primary", () => {
  expect(renderer.create(<Button primary>Label</Button>)).toMatchSnapshot();
});

it("renders primary raised", () => {
  expect(
    renderer.create(
      <Button primary raised>
        Label
      </Button>
    )
  ).toMatchSnapshot();
});

it("renders dense", () => {
  expect(renderer.create(<Button dense>Label</Button>)).toMatchSnapshot();
});

it("renders unelevated", () => {
  expect(renderer.create(<Button unelevated>Label</Button>)).toMatchSnapshot();
});

it("renders outlined", () => {
  expect(renderer.create(<Button outlined>Label</Button>)).toMatchSnapshot();
});

it("renders with an icon", () => {
  expect(
    renderer.create(
      <Button>
        <ButtonIcon>favorite</ButtonIcon>Label
      </Button>
    )
  ).toMatchSnapshot();
});

it("renders as a link", () => {
  expect(
    renderer.create(
      <Button link href="#">
        Link
      </Button>
    )
  ).toMatchSnapshot();
});

it("passed callback ref(buttonRef) is called with dom node", () => {
  class Wrapper extends React.Component {
    render() {
      return this.props.children;
    }
  }
  const buttonRef = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <Wrapper>
      <Button buttonRef={buttonRef}>Label</Button>
    </Wrapper>
  );
  const button = TestUtils.findRenderedDOMComponentWithTag(component, "button");
  expect(buttonRef).toHaveBeenCalledWith(button);
});

it("renders with a buttonRef correctly", () => {
  let actualMockRef = React.createRef();
  const tree = renderer.create(
    <Button buttonRef={ref => (actualMockRef = ref)}>Label</Button>
  );
  // Confirm that adding a buttonRef didn't mess up the DOM.
  expect(tree).toMatchSnapshot();
});
