"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Represents a button action on a card.
 *
 * A HTML `button` element is created by default but you can override this
 * using the `element` prop (allowing you to use an anchor for example.)
 */
var CardActionButton = function CardActionButton(_ref) {
  var className = _ref.className,
      element = _ref.element,
      other = _objectWithoutProperties(_ref, ["className", "element"]);

  var T = element;
  return _react2.default.createElement(T, _extends({
    className: (0, _classnames2.default)("mdc-card__action", "mdc-card__action--button", "mdc-button", "mdc-button--primary", className)
  }, other));
};

CardActionButton.propTypes = {
  /** HTML element type */
  element: _propTypes.string
};

CardActionButton.defaultProps = {
  element: "button"
};

exports.default = CardActionButton;