"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactIcon = require("@cdk-uip/react-icon");

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Custom CDK chip implementation.
 *
 * > Note that an offical Material Design chip is now available. See
 * the `<ChipSet>` component for more details.
 *
 * * To make the chip clickable specify the `onClick` prop.
 * * To add a delete button specify the `onClickDelete` prop.
 */
var Chip = function Chip(_ref) {
  var className = _ref.className,
      onClick = _ref.onClick,
      onClickDelete = _ref.onClickDelete,
      contact = _ref.contact,
      children = _ref.children,
      other = _objectWithoutProperties(_ref, ["className", "onClick", "onClickDelete", "contact", "children"]);

  var T = onClick ? "button" : "span";
  return _react2.default.createElement(
    T,
    _extends({
      className: (0, _classnames2.default)("cdk-chip", {
        "cdk-chip--deletable": onClickDelete,
        "cdk-chip--contact": contact
      }, className),
      onClick: onClick,
      type: onClick ? "button" : undefined
    }, other),
    contact,
    _react2.default.createElement(
      "span",
      { className: "cdk-chip__text" },
      children
    ),
    onClickDelete && _react2.default.createElement(
      "button",
      { className: "cdk-chip__action", onClick: onClickDelete },
      _react2.default.createElement(
        _reactIcon.Icon,
        null,
        "cancel"
      )
    )
  );
};

Chip.propTypes = {
  /** Render as a button and call this function when the chip is clicked. */
  onClick: _propTypes.func,
  /** Display a delete icon and call this function when it is clicked */
  onClickDelete: _propTypes.func,
  /** The contact element to render. Use a `<ChipContactImage>` or `<ChipContactText>` component. */
  contact: _propTypes.element
};

exports.default = Chip;