import React, { Component, Fragment } from "react";
import {
  ChipSet,
  Chip,
  ChipText,
  ChipLeadingIcon,
  ChipDeleteIcon,
  ChipCheckmark
} from ".";
import { TextField } from "@cdk-uip/react-text-field";
import { storiesOf } from "@storybook/react";
import { action } from "@storybook/addon-actions";
import { withKnobs, boolean } from "@storybook/addon-knobs";

storiesOf("chips", module)
  .addDecorator(withKnobs)
  .add("chips", () => {
    const leadingIcon = boolean("leading icon", false);
    return (
      <ChipSet>
        <Chip tabIndex="0" onClick={action("onClick")}>
          {leadingIcon && <ChipLeadingIcon>wb_sunny</ChipLeadingIcon>}
          <ChipText>Chip One</ChipText>
        </Chip>
        <Chip tabIndex="0" onClick={action("onClick")}>
          {leadingIcon && <ChipLeadingIcon>face</ChipLeadingIcon>}
          <ChipText>Chip Two</ChipText>
        </Chip>
        <Chip tabIndex="0" onClick={action("onClick")}>
          {leadingIcon && <ChipLeadingIcon>alarm</ChipLeadingIcon>}
          <ChipText>Chip Three</ChipText>
        </Chip>
        <Chip tabIndex="0" onClick={action("onClick")}>
          {leadingIcon && <ChipLeadingIcon>bookmark</ChipLeadingIcon>}
          <ChipText>Chip Four</ChipText>
        </Chip>
      </ChipSet>
    );
  })
  .add("choice chips", () => {
    class Choices extends Component {
      state = {
        chips: ["Extra Small", "Small", "Medium", "Large", "Extra Large"],
        selected: -1
      };
      render() {
        return (
          <ChipSet choice>
            {this.state.chips.map((text, index) => (
              <Chip
                key={index}
                tabIndex="0"
                selected={this.state.selected === index}
                onClick={() =>
                  this.setState(state => ({
                    selected: state.selected === index ? -1 : index
                  }))
                }
              >
                <ChipText>{text}</ChipText>
              </Chip>
            ))}
          </ChipSet>
        );
      }
    }
    return <Choices />;
  })
  .add("filter chips", () => {
    class Choices extends Component {
      state = {
        chips: [
          { id: 0, text: "Alice", checked: false },
          { id: 1, text: "Bob", checked: false },
          { id: 2, text: "Charlie", checked: false },
          { id: 3, text: "David", checked: false },
          { id: 4, text: "Ellie", checked: false }
        ]
      };
      render() {
        return (
          <ChipSet filter>
            {this.state.chips.map(({ id, checked, text }) => (
              <Chip
                key={id}
                tabIndex="0"
                selected={checked}
                onClick={() =>
                  this.setState(state => ({
                    chips: state.chips.map(
                      chip =>
                        chip.id === id
                          ? { ...chip, checked: !chip.checked }
                          : chip
                    )
                  }))
                }
              >
                <ChipCheckmark />
                <ChipText>{text}</ChipText>
              </Chip>
            ))}
          </ChipSet>
        );
      }
    }
    return <Choices />;
  })
  .add("filter chips with leading icon", () => {
    class Choices extends Component {
      state = {
        chips: [
          { id: 0, text: "Alice", checked: false },
          { id: 1, text: "Bob", checked: false },
          { id: 2, text: "Charlie", checked: false },
          { id: 3, text: "David", checked: false },
          { id: 4, text: "Ellie", checked: false }
        ]
      };
      render() {
        return (
          <ChipSet filter>
            {this.state.chips.map(({ id, checked, text }) => (
              <Chip
                key={id}
                tabIndex="0"
                selected={checked}
                onClick={() =>
                  this.setState(state => ({
                    chips: state.chips.map(
                      chip =>
                        chip.id === id
                          ? { ...chip, checked: !chip.checked }
                          : chip
                    )
                  }))
                }
              >
                <ChipLeadingIcon hidden={checked}>face</ChipLeadingIcon>
                <ChipCheckmark />
                <ChipText>{text}</ChipText>
              </Chip>
            ))}
          </ChipSet>
        );
      }
    }
    return <Choices />;
  })
  .add("input chips", () => {
    class InputChips extends Component {
      state = {
        chips: ["Jane Smith", "John Doe"],
        name: ""
      };
      render() {
        return (
          <Fragment>
            <form
              onSubmit={e => {
                e.preventDefault();
                if (this.state.name) {
                  // Add to the array
                  this.setState(state => ({
                    chips: [...state.chips, state.name],
                    name: ""
                  }));
                }
              }}
            >
              <TextField
                value={this.state.name}
                onChange={e => this.setState({ name: e.target.value })}
                label="Enter a name"
                box
                fullWidth
              />

              <ChipSet input>
                {this.state.chips.map((name, index) => (
                  <Chip key={index} onClick={() => action("onClick")(index)}>
                    <ChipLeadingIcon>face</ChipLeadingIcon>
                    <ChipText>{name}</ChipText>
                    <ChipDeleteIcon
                      onClick={() => {
                        // Update state
                        this.setState(state => ({
                          chips: state.chips.filter((chip, i) => i !== index)
                        }));
                      }}
                    />
                  </Chip>
                ))}
              </ChipSet>
            </form>
          </Fragment>
        );
      }
    }
    return <InputChips />;
  });
