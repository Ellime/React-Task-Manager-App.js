"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactIntl = require("react-intl");

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactTextField = require("@cdk-uip/react-text-field");

var _currency = require("./currency");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Currency text field. Allows formatted input of a currency value. Just start typing
 * the value.
 *
 * Note that all `TextField` props are supported.
 */
var CurrencyTextField = function (_Component) {
  _inherits(CurrencyTextField, _Component);

  function CurrencyTextField() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CurrencyTextField);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CurrencyTextField.__proto__ || Object.getPrototypeOf(CurrencyTextField)).call.apply(_ref, [this].concat(args))), _this), _this.onChange = function (e) {
      e.preventDefault();
      // TODO: negative numbers?
      var value = Number(e.target.value.replace(/[^0-9-]/g, "")) / Math.pow(10, (0, _currency.currencyDecimalPlaces)(_this.props.currency));
      _this.props.onChange(e, value);
    }, _this.onMouseUp = function () {
      if (_this.props.autoSelect && _this.input) {
        _this.input.select();
      }
    }, _this.onInputRef = function (ref) {
      _this.input = ref;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CurrencyTextField, [{
    key: "render",
    value: function render() {
      var _props = this.props,
          value = _props.value,
          onChange = _props.onChange,
          currency = _props.currency,
          currencyDisplay = _props.currencyDisplay,
          intl = _props.intl,
          decimalDigits = _props.decimalDigits,
          autoSelect = _props.autoSelect,
          other = _objectWithoutProperties(_props, ["value", "onChange", "currency", "currencyDisplay", "intl", "decimalDigits", "autoSelect"]);

      var decimalPlaces = (0, _currency.currencyDecimalPlaces)(currency, decimalDigits);

      return _react2.default.createElement(_reactTextField.TextField, _extends({
        value: intl.formatNumber(value, {
          style: "currency",
          currency: currency,
          currencyDisplay: currencyDisplay,
          minimumFractionDigits: decimalPlaces,
          maximumFractionDigits: decimalPlaces
        }),
        onChange: this.onChange,
        inputRef: this.onInputRef,
        onMouseUp: this.onMouseUp
      }, other));
    }
  }]);

  return CurrencyTextField;
}(_react.Component);

CurrencyTextField.propTypes = {
  /**
   * The currency code to use when `react-intl` computes the formatted value.
   * For example: GBP, USD, EUR, etc.
   */
  currency: _propTypes2.default.string.isRequired,
  /** The current value */
  value: _propTypes2.default.number.isRequired,
  /**
   * Called when the value changes. Passed the change event and
   * the new value as a number.
   */
  onChange: _propTypes2.default.func,
  /** Select the input contents when clicking with the mouse */
  autoSelect: _propTypes2.default.bool,
  /** The currency display to use */
  currencyDisplay: _propTypes2.default.oneOf(["symbol", "code", "name"]),
  /** Number of decimal digits required **/
  decimalDigits: _propTypes2.default.number
};
CurrencyTextField.defaultProps = {
  autoSelect: true,
  currencyDisplay: "symbol"
};
exports.default = (0, _reactIntl.injectIntl)(CurrencyTextField);