import React, { Component } from "react";
import { injectIntl } from "react-intl";
import PropTypes from "prop-types";
import { TextField } from "@cdk-uip/react-text-field";
import { currencyDecimalPlaces } from "./currency";

/**
 * Currency text field. Allows formatted input of a currency value. Just start typing
 * the value.
 *
 * Note that all `TextField` props are supported.
 */
class CurrencyTextField extends Component {
  static propTypes = {
    /**
     * The currency code to use when `react-intl` computes the formatted value.
     * For example: GBP, USD, EUR, etc.
     */
    currency: PropTypes.string.isRequired,
    /** The current value */
    value: PropTypes.number.isRequired,
    /**
     * Called when the value changes. Passed the change event and
     * the new value as a number.
     */
    onChange: PropTypes.func,
    /** Select the input contents when clicking with the mouse */
    autoSelect: PropTypes.bool,
    /** The currency display to use */
    currencyDisplay: PropTypes.oneOf(["symbol", "code", "name"]),
    /** Number of decimal digits required **/
    decimalDigits: PropTypes.number
  };

  static defaultProps = {
    autoSelect: true,
    currencyDisplay: "symbol"
  };

  onChange = e => {
    e.preventDefault();
    // TODO: negative numbers?
    const value =
      Number(e.target.value.replace(/[^0-9-]/g, "")) /
      Math.pow(10, currencyDecimalPlaces(this.props.currency));
    this.props.onChange(e, value);
  };

  onMouseUp = () => {
    if (this.props.autoSelect && this.input) {
      this.input.select();
    }
  };

  onInputRef = ref => {
    this.input = ref;
  };

  render() {
    const {
      value,
      onChange,
      currency,
      currencyDisplay,
      intl,
      decimalDigits,
      autoSelect,
      ...other
    } = this.props;
    const decimalPlaces = currencyDecimalPlaces(currency, decimalDigits);

    return (
      <TextField
        value={intl.formatNumber(value, {
          style: "currency",
          currency,
          currencyDisplay,
          minimumFractionDigits: decimalPlaces,
          maximumFractionDigits: decimalPlaces
        })}
        onChange={this.onChange}
        inputRef={this.onInputRef}
        onMouseUp={this.onMouseUp}
        {...other}
      />
    );
  }
}

export default injectIntl(CurrencyTextField);
