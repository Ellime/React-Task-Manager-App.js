import React, { Fragment } from "react";
import {
  DataTable,
  DataTableHeader,
  DataTableRow,
  DataTableCell,
  DataTableHeaderCell,
  DataTableBody,
  DataTableToolbar,
  DataTableToolbarTitle,
  DataTableToolbarTitlePrimary,
  DataTableToolbarTitleAlternate,
  DataTableToolbarActions,
  DataTableToolbarAction,
  DataTablePagination,
  DataTablePaginationSelect,
  DataTablePaginationText,
  DataTablePaginationActions,
  DataTablePaginationAction
} from ".";
import { Card } from "@cdk-uip/react-card";
import { Checkbox } from "@cdk-uip/react-checkbox";
import { Button } from "@cdk-uip/react-button";
import { Icon } from "@cdk-uip/react-icon";
import { storiesOf } from "@storybook/react";
import { withKnobs, boolean } from "@storybook/addon-knobs";

const data = [
  {
    id: 1,
    material: "Acrylic (Transparent)",
    quantity: 25,
    price: "$2.99",
    checked: false
  },
  {
    id: 2,
    material: "Plywood (Birch)",
    quantity: 35,
    price: "$1.25",
    checked: false
  },
  {
    id: 3,
    material: "Laminate (Gold on Blue)",
    quantity: 10,
    price: "$2.35",
    checked: false
  }
];

storiesOf("data-table", module)
  .addDecorator(withKnobs)
  .add("props", () => {
    class Wrapper extends React.Component {
      state = {
        data: data.map(item => ({ ...item })),
        rowsPerPage: 5,
        sortCol: 0,
        sortAscending: true
      };

      handleSort(sortCol) {
        this.setState(
          state => ({
            sortCol,
            sortAscending:
              state.sortCol === sortCol ? !state.sortAscending : true
          }),
          () =>
            this.setState(state => ({
              data: [...state.data].sort((a, b) => {
                let compare = 0;
                switch (state.sortCol) {
                  case 0:
                    compare = a.material.localeCompare(b.material);
                    break;
                  case 1:
                    compare = a.quantity - b.quantity;
                    break;
                  case 2:
                    compare = a.price.localeCompare(b.price);
                    break;
                  default:
                    break;
                }
                return (compare *= state.sortAscending ? 1 : -1);
              })
            }))
        );
      }

      render() {
        const toolbar = boolean("Show toolbar", true);
        const pagination = boolean("Show pagination controls", true);
        const selectable = boolean("Selectable rows", true);
        const hover = boolean("Hover state", true);
        const sortable = boolean("Sortable", false);

        const selected = this.state.data.filter(item => item.checked).length;
        const allChecked = selected && selected === this.state.data.length;

        const table = (
          <Fragment>
            {toolbar && (
              <DataTableToolbar>
                <DataTableToolbarTitle>
                  {selected === 0 && (
                    <DataTableToolbarTitlePrimary>
                      Table Title
                    </DataTableToolbarTitlePrimary>
                  )}
                  {selected > 0 && (
                    <DataTableToolbarTitleAlternate>
                      {selected} item(s) selected
                    </DataTableToolbarTitleAlternate>
                  )}
                </DataTableToolbarTitle>
                <DataTableToolbarActions>
                  {selected === 0 && (
                    <Fragment>
                      <DataTableToolbarAction>
                        <Icon link href="#">
                          filter_list
                        </Icon>
                      </DataTableToolbarAction>
                      <DataTableToolbarAction>
                        <Icon link href="#">
                          more_vert
                        </Icon>
                      </DataTableToolbarAction>
                    </Fragment>
                  )}
                  {selected > 0 && (
                    <Fragment>
                      <DataTableToolbarAction>
                        <Button primary>Action 1</Button>
                      </DataTableToolbarAction>
                      <DataTableToolbarAction>
                        <Button primary>Action 1</Button>
                      </DataTableToolbarAction>
                      <DataTableToolbarAction>
                        <Button raised>Action 3</Button>
                      </DataTableToolbarAction>
                    </Fragment>
                  )}
                </DataTableToolbarActions>
              </DataTableToolbar>
            )}
            <DataTable
              selectable={selectable}
              hover={hover}
              sortable={sortable}
            >
              <DataTableHeader>
                <DataTableRow>
                  {selectable && (
                    <DataTableHeaderCell nonNumeric>
                      <Checkbox
                        checked={allChecked}
                        onChange={({ target: { checked } }) => {
                          this.setState(state => ({
                            allChecked: checked,
                            data: state.data.map(item => ({ ...item, checked }))
                          }));
                        }}
                      />
                    </DataTableHeaderCell>
                  )}
                  <DataTableHeaderCell
                    nonNumeric
                    sortable={sortable}
                    sortDirection={
                      this.state.sortCol === 0
                        ? this.state.sortAscending
                          ? "asc"
                          : "desc"
                        : "none"
                    }
                    onClick={() => sortable && this.handleSort(0)}
                  >
                    Material
                  </DataTableHeaderCell>
                  <DataTableHeaderCell
                    sortable={sortable}
                    sortDirection={
                      this.state.sortCol === 1
                        ? this.state.sortAscending
                          ? "asc"
                          : "desc"
                        : "none"
                    }
                    onClick={() => sortable && this.handleSort(1)}
                  >
                    Quantity
                  </DataTableHeaderCell>
                  <DataTableHeaderCell
                    sortable={sortable}
                    sortDirection={
                      this.state.sortCol === 2
                        ? this.state.sortAscending
                          ? "asc"
                          : "desc"
                        : "none"
                    }
                    onClick={() => sortable && this.handleSort(2)}
                  >
                    Price
                  </DataTableHeaderCell>
                </DataTableRow>
              </DataTableHeader>
              <DataTableBody>
                {this.state.data.map(
                  ({ id, material, quantity, price, checked }) => (
                    <DataTableRow key={id} selected={checked}>
                      {selectable && (
                        <DataTableCell nonNumeric>
                          <Checkbox
                            checked={checked}
                            onChange={({ target: { checked } }) => {
                              this.setState(state => ({
                                data: state.data.map(
                                  _ => (_.id === id ? { ..._, checked } : _)
                                )
                              }));
                            }}
                          />
                        </DataTableCell>
                      )}
                      <DataTableCell nonNumeric>{material}</DataTableCell>
                      <DataTableCell>{quantity}</DataTableCell>
                      <DataTableCell>{price}</DataTableCell>
                    </DataTableRow>
                  )
                )}
              </DataTableBody>
            </DataTable>
            {pagination && (
              <DataTablePagination>
                <DataTablePaginationSelect
                  label="Rows per page:"
                  value={this.state.rowsPerPage}
                  onChange={rowsPerPage => this.setState({ rowsPerPage })}
                >
                  <option value={5}>5</option>
                  <option value={10}>10</option>
                  <option value={25}>25</option>
                  <option value={100}>100</option>
                </DataTablePaginationSelect>
                <DataTablePaginationText>1-10 of 100</DataTablePaginationText>
                <DataTablePaginationActions>
                  <DataTablePaginationAction>
                    <Icon>chevron_left</Icon>
                  </DataTablePaginationAction>
                  <DataTablePaginationAction>
                    <Icon>chevron_right</Icon>
                  </DataTablePaginationAction>
                </DataTablePaginationActions>
              </DataTablePagination>
            )}
          </Fragment>
        );

        const card = boolean("On a card", true);

        if (card) {
          return <Card>{table}</Card>;
        }
        return table;
      }
    }
    return <Wrapper />;
  });
