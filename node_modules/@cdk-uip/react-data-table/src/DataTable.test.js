import React from "react";
import {
  DataTable,
  DataTableHeader,
  DataTableRow,
  DataTableCell,
  DataTableHeaderCell,
  DataTableBody,
  DataTableToolbar,
  DataTableToolbarTitle,
  DataTableToolbarTitlePrimary,
  DataTableToolbarTitleAlternate,
  DataTableToolbarActions,
  DataTableToolbarAction,
  DataTablePagination,
  DataTablePaginationSelect,
  DataTablePaginationText,
  DataTablePaginationActions,
  DataTablePaginationAction
} from ".";
import { Card } from "@cdk-uip/react-card";
import { Checkbox } from "@cdk-uip/react-checkbox";
import { Icon } from "@cdk-uip/react-icon";
import { Button } from "@cdk-uip/react-button";
import renderer from "react-test-renderer";

const Table = ({ selectable, hover, sortable }) => (
  <DataTable selectable={selectable} hover={hover} sortable={sortable}>
    <DataTableHeader>
      <DataTableRow>
        {selectable && (
          <DataTableHeaderCell nonNumeric>
            <Checkbox />
          </DataTableHeaderCell>
        )}
        <DataTableHeaderCell nonNumeric sortable={sortable} sortDirection="asc">
          Material
        </DataTableHeaderCell>
        <DataTableHeaderCell sortable={sortable} sortDirection="none">
          Quantity
        </DataTableHeaderCell>
        <DataTableHeaderCell sortable={sortable} sortDirection="none">
          Price
        </DataTableHeaderCell>
      </DataTableRow>
    </DataTableHeader>
    <DataTableBody>
      <DataTableRow selected={selectable}>
        {selectable && (
          <DataTableCell nonNumeric>
            <Checkbox />
          </DataTableCell>
        )}
        <DataTableCell nonNumeric>Acrylic (Transparent)</DataTableCell>
        <DataTableCell>25</DataTableCell>
        <DataTableCell>$2.90</DataTableCell>
      </DataTableRow>
      <DataTableRow>
        {selectable && (
          <DataTableCell nonNumeric>
            <Checkbox />
          </DataTableCell>
        )}
        <DataTableCell nonNumeric>Plywood (Birch)</DataTableCell>
        <DataTableCell>25</DataTableCell>
        <DataTableCell>$1.25</DataTableCell>
      </DataTableRow>
      <DataTableRow>
        {selectable && (
          <DataTableCell nonNumeric>
            <Checkbox />
          </DataTableCell>
        )}
        <DataTableCell nonNumeric>Laminate (Gold on Blue)</DataTableCell>
        <DataTableCell>10</DataTableCell>
        <DataTableCell>$2.35</DataTableCell>
      </DataTableRow>
    </DataTableBody>
  </DataTable>
);

it("renders stand-alone", () => {
  expect(renderer.create(<Table hover />)).toMatchSnapshot();
});

it("renders with checkboxes", () => {
  expect(renderer.create(<Table selectable />)).toMatchSnapshot();
});

it("renders with no hover", () => {
  expect(renderer.create(<Table hover={false} />)).toMatchSnapshot();
});

it("renders on a card", () => {
  expect(
    renderer.create(
      <Card>
        <Table />
      </Card>
    )
  ).toMatchSnapshot();
});

it("renders with a title and icons", () => {
  expect(
    renderer.create(
      <Card>
        <DataTableToolbar>
          <DataTableToolbarTitle>
            <DataTableToolbarTitlePrimary>
              Table Title
            </DataTableToolbarTitlePrimary>
          </DataTableToolbarTitle>
          <DataTableToolbarActions>
            <DataTableToolbarAction>
              <Icon link href="#">
                filter_list
              </Icon>
            </DataTableToolbarAction>
            <DataTableToolbarAction>
              <Icon link href="#">
                more_vert
              </Icon>
            </DataTableToolbarAction>
          </DataTableToolbarActions>
        </DataTableToolbar>
        <Table />
      </Card>
    )
  ).toMatchSnapshot();
});

it("renders with an alternate title and actions", () => {
  expect(
    renderer.create(
      <Card>
        <DataTableToolbar>
          <DataTableToolbarTitle>
            <DataTableToolbarTitleAlternate>
              Alternate Title
            </DataTableToolbarTitleAlternate>
          </DataTableToolbarTitle>
          <DataTableToolbarActions>
            <DataTableToolbarAction>
              <Button primary>Action 1</Button>
            </DataTableToolbarAction>
            <DataTableToolbarAction>
              <Button primary>Action 1</Button>
            </DataTableToolbarAction>
          </DataTableToolbarActions>
        </DataTableToolbar>
        <Table />
      </Card>
    )
  ).toMatchSnapshot();
});

it("renders with pagination", () => {
  expect(
    renderer.create(
      <Card>
        <Table />
        <DataTablePagination>
          <DataTablePaginationSelect label="Rows per page:">
            <option value={5}>5</option>
            <option value={10}>10</option>
            <option value={25}>25</option>
          </DataTablePaginationSelect>
          <DataTablePaginationText>1-10 of 100</DataTablePaginationText>
          <DataTablePaginationActions>
            <DataTablePaginationAction>
              <Icon>chevron_left</Icon>
            </DataTablePaginationAction>
            <DataTablePaginationAction>
              <Icon>chevron_right</Icon>
            </DataTablePaginationAction>
          </DataTablePaginationActions>
        </DataTablePagination>
      </Card>
    )
  ).toMatchSnapshot();
});

it("renders sortable", () => {
  expect(renderer.create(<Table sortable />)).toMatchSnapshot();
});
