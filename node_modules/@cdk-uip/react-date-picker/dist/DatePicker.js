"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactDates = require("react-dates");

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _moment = require("moment");

var _moment2 = _interopRequireDefault(_moment);

require("react-dates/initialize");

var _DatePickerInput = require("./DatePickerInput");

var _DatePickerInput2 = _interopRequireDefault(_DatePickerInput);

var _reactIcon = require("@cdk-uip/react-icon");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Date picker based on [react-dates](https://github.com/airbnb/react-dates)
 *
 * Note that in IE11 you need to provide a polyfill for `Array.find`. You
 * can do this by install `core-js` and then importing `core-js/fn/array/from`
 * in your main `index.js`.
 */
var DatePicker = function (_React$Component) {
  _inherits(DatePicker, _React$Component);

  function DatePicker(props) {
    _classCallCheck(this, DatePicker);

    var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

    _this.toggleCalendar = function () {
      _this.setState(function (state) {
        return { active: !state.active };
      });
    };

    _this.onOutsideClick = function () {
      _this.setState({ active: false });
    };

    _this.getDate = function (date) {
      _this.setState(function (state) {
        return { date: date, active: !state.active };
      }, function () {
        return _this.props.onChange(date);
      });
    };

    _this.props.locale && _this.setLocale();
    _this.state = { active: false, date: _this.initDateFromProps() };
    return _this;
  }

  _createClass(DatePicker, [{
    key: "initDateFromProps",
    value: function initDateFromProps() {
      var _props = this.props,
          date = _props.date,
          locale = _props.locale;

      if (date && locale) {
        return (0, _moment2.default)(date).locale(locale);
      } else if (date) {
        return (0, _moment2.default)(date);
      } else return undefined;
    }
  }, {
    key: "setLocale",
    value: function setLocale() {
      var locale = this.props.locale;

      _moment2.default.locale(locale); //set the locale globally
    }
  }, {
    key: "render",
    value: function render() {
      var state = this.state,
          toggleCalendar = this.toggleCalendar,
          getDate = this.getDate,
          onOutsideClick = this.onOutsideClick;
      var date = state.date,
          active = state.active;
      var _props2 = this.props,
          label = _props2.label,
          format = _props2.format;

      return _react2.default.createElement(
        _react.Fragment,
        null,
        _react2.default.createElement(
          "div",
          { className: "DatePickerInput__leading-icon" },
          _react2.default.createElement(
            _reactIcon.Icon,
            { className: "mdc-text-field__icon" },
            "date_range"
          )
        ),
        _react2.default.createElement(
          "div",
          { className: "DatePickerInput__wrapper" },
          _react2.default.createElement(_DatePickerInput2.default, {
            label: label,
            value: date ? date.format(format) : "",
            active: active,
            onClick: toggleCalendar
          })
        ),
        active && _react2.default.createElement(_reactDates.DayPickerSingleDateController, {
          onDateChange: getDate,
          date: date,
          onOutsideClick: onOutsideClick,
          focused: active
        })
      );
    }
  }]);

  return DatePicker;
}(_react2.default.Component);

DatePicker.propTypes = {
  /** The selected date */
  date: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  /** Called when the date is changed and passed the moment date object */
  onChange: _propTypes2.default.func,
  /** Called when user clicks outside of the calendar */
  onOutsideClick: _propTypes2.default.func,
  /** The label to use */
  label: _propTypes2.default.node,
  /** The date format to display */
  format: _propTypes2.default.string,
  /** The locale to use for the Calendar */
  locale: _propTypes2.default.string
};
DatePicker.defaultProps = {
  onChange: function onChange() {},
  /**  Changes based on user locale, e.g. MM/DD/YYYY 'en-us' or DD/MM/YYYY 'fr'*/
  /**  Exposes moment API - Read More: https://momentjs.com/docs/ */
  format: "L"
};
exports.default = DatePicker;