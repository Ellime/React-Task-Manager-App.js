import React, { Fragment } from "react";
import { DayPickerSingleDateController } from "react-dates";
import PropTypes from "prop-types";
import moment from "moment";
import "react-dates/initialize";
import DatePickerInput from "./DatePickerInput";
import { Icon } from "@cdk-uip/react-icon";

/**
 * Date picker based on [react-dates](https://github.com/airbnb/react-dates)
 *
 * Note that in IE11 you need to provide a polyfill for `Array.find`. You
 * can do this by install `core-js` and then importing `core-js/fn/array/from`
 * in your main `index.js`.
 */
export default class DatePicker extends React.Component {
  static propTypes = {
    /** The selected date */
    date: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
    /** Called when the date is changed and passed the moment date object */
    onChange: PropTypes.func,
    /** Called when user clicks outside of the calendar */
    onOutsideClick: PropTypes.func,
    /** The label to use */
    label: PropTypes.node,
    /** The date format to display */
    format: PropTypes.string,
    /** The locale to use for the Calendar */
    locale: PropTypes.string
  };

  static defaultProps = {
    onChange: () => {},
    /**  Changes based on user locale, e.g. MM/DD/YYYY 'en-us' or DD/MM/YYYY 'fr'*/
    /**  Exposes moment API - Read More: https://momentjs.com/docs/ */
    format: "L"
  };

  constructor(props) {
    super(props);
    this.props.locale && this.setLocale();
    this.state = { active: false, date: this.initDateFromProps() };
  }

  initDateFromProps() {
    const { date, locale } = this.props;
    if (date && locale) {
      return moment(date).locale(locale);
    } else if (date) {
      return moment(date);
    } else return undefined;
  }

  setLocale() {
    const { locale } = this.props;
    moment.locale(locale); //set the locale globally
  }

  toggleCalendar = () => {
    this.setState(state => ({ active: !state.active }));
  };

  onOutsideClick = () => {
    this.setState({ active: false });
  };

  getDate = date => {
    this.setState(
      state => ({ date, active: !state.active }),
      () => this.props.onChange(date)
    );
  };

  render() {
    const { state, toggleCalendar, getDate, onOutsideClick } = this;
    const { date, active } = state;
    const { label, format } = this.props;
    return (
      <Fragment>
        <div className="DatePickerInput__leading-icon">
          <Icon className="mdc-text-field__icon">date_range</Icon>
        </div>
        <div className="DatePickerInput__wrapper">
          <DatePickerInput
            label={label}
            value={date ? date.format(format) : ""}
            active={active}
            onClick={toggleCalendar}
          />
        </div>
        {active && (
          <DayPickerSingleDateController
            onDateChange={getDate}
            date={date}
            onOutsideClick={onOutsideClick}
            focused={active}
          />
        )}
      </Fragment>
    );
  }
}
