"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Dialogs should be used as controlled components with the application
 * responsible for hiding/showing them.
 */
var Dialog = function (_React$Component) {
  _inherits(Dialog, _React$Component);

  function Dialog() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Dialog);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Dialog.__proto__ || Object.getPrototypeOf(Dialog)).call.apply(_ref, [this].concat(args))), _this), _this.state = { animating: _this.props.open }, _this.handleKeyDown = function (e) {
      (e.key === "Escape" || e.keyCode === 27) && _this.props.onCancel();
    }, _this.handleTransitionEnd = function (e) {
      if (e.target === _this.surface) {
        _this.setState({ animating: false });
        var onReady = _this.props.onReady;

        if (onReady) {
          // Custom focus handling
          onReady();
        } else {
          // Legacy focus support
          var button = _this.surface.querySelector("[type=button]:last-child");
          if (button) {
            button.focus();
          }
        }
      }
    }, _this.handleClick = function (e) {
      e.stopPropagation();
      // Support for legacy button classes
      if (e.target) {
        if (e.target.classList.contains("mdc-dialog__footer__button--accept")) {
          _this.props.onAccept();
        }
        if (e.target.classList.contains("mdc-dialog__footer__button--cancel")) {
          _this.props.onCancel();
        }
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Dialog, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.open && this.open();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.open !== this.props.open) {
        this.props.open ? this.open() : this.close();
        this.setState({ animating: true });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.close();
    }
  }, {
    key: "open",
    value: function open() {
      document.addEventListener("keydown", this.handleKeyDown);
      document.body.classList.add("mdc-dialog-scroll-lock");
    }
  }, {
    key: "close",
    value: function close() {
      document.removeEventListener("keydown", this.handleKeyDown);
      document.body.classList.remove("mdc-dialog-scroll-lock");
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          open = _props.open,
          className = _props.className,
          onReady = _props.onReady,
          children = _props.children,
          onCancel = _props.onCancel,
          onAccept = _props.onAccept,
          other = _objectWithoutProperties(_props, ["open", "className", "onReady", "children", "onCancel", "onAccept"]);

      return _react2.default.createElement(
        "aside",
        _extends({
          className: (0, _classnames2.default)("mdc-dialog", {
            "mdc-dialog--animating": this.state.animating,
            "mdc-dialog--open": open
          }, className),
          role: "alertdialog",
          onClick: onCancel,
          onTransitionEnd: this.handleTransitionEnd
        }, other),
        _react2.default.createElement(
          "div",
          {
            className: "mdc-dialog__surface",
            ref: function ref(surface) {
              _this2.surface = surface;
            },
            onClick: this.handleClick
          },
          this.props.children
        ),
        open && _react2.default.createElement("div", { className: "mdc-dialog__backdrop" })
      );
    }
  }]);

  return Dialog;
}(_react2.default.Component);

Dialog.propTypes = {
  /** Open the dialog. */
  open: _propTypes.bool,
  /** @deprecated Called when the Accept button is clicked. */
  onAccept: _propTypes.func,
  /** Called when the dialog is cancelled by clicking on the backdrop or pressing ESC. */
  onCancel: _propTypes.func,
  /** Called when it is safe to set focus */
  onReady: _propTypes.func
};
Dialog.defaultProps = {
  onAccept: function onAccept() {},
  onCancel: function onCancel() {}
};
exports.default = Dialog;