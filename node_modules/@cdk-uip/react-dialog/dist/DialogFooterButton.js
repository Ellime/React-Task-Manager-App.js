"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * A button that will appear in a `DialogFooter`. Buttons can only be
 * "accept" or "cancel". Avoid adding a third button type.
 */
var DialogFooterButton = function DialogFooterButton(_ref) {
  var className = _ref.className,
      accept = _ref.accept,
      cancel = _ref.cancel,
      action = _ref.action,
      children = _ref.children,
      other = _objectWithoutProperties(_ref, ["className", "accept", "cancel", "action", "children"]);

  return _react2.default.createElement(
    "button",
    _extends({
      type: "button",
      className: (0, _classnames2.default)("mdc-button", "mdc-dialog__footer__button", {
        "mdc-dialog__footer__button--accept": accept,
        "mdc-dialog__footer__button--cancel": cancel,
        "mdc-dialog__action": action
      }, className)
    }, other),
    children
  );
};

DialogFooterButton.propTypes = {
  /**
   * @deprecated
   * Indicates this is the Accept button.
   * The dialog will call onAccept when this button is clicked.
   */
  accept: _propTypes.bool,
  /**
   * @deprecated
   * Indicates this is the Cancel button.
   * The dialog will call onCancel when this button is clicked.
   */
  cancel: _propTypes.bool,
  /**
   * Displays a coloured button.
   */
  action: _propTypes.bool
};

DialogFooterButton.defaultProps = {
  action: true
};

exports.default = DialogFooterButton;