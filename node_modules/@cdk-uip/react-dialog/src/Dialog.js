import React from "react";
import classnames from "classnames";
import { bool, func } from "prop-types";

/**
 * Dialogs should be used as controlled components with the application
 * responsible for hiding/showing them.
 */
class Dialog extends React.Component {
  static propTypes = {
    /** Open the dialog. */
    open: bool,
    /** @deprecated Called when the Accept button is clicked. */
    onAccept: func,
    /** Called when the dialog is cancelled by clicking on the backdrop or pressing ESC. */
    onCancel: func,
    /** Called when it is safe to set focus */
    onReady: func
  };

  static defaultProps = {
    onAccept: () => {},
    onCancel: () => {}
  };

  state = { animating: this.props.open };

  componentDidMount() {
    this.props.open && this.open();
  }

  componentDidUpdate(prevProps) {
    if (prevProps.open !== this.props.open) {
      this.props.open ? this.open() : this.close();
      this.setState({ animating: true });
    }
  }

  componentWillUnmount() {
    this.close();
  }

  open() {
    document.addEventListener("keydown", this.handleKeyDown);
    document.body.classList.add("mdc-dialog-scroll-lock");
  }

  close() {
    document.removeEventListener("keydown", this.handleKeyDown);
    document.body.classList.remove("mdc-dialog-scroll-lock");
  }

  handleKeyDown = e => {
    (e.key === "Escape" || e.keyCode === 27) && this.props.onCancel();
  };

  handleTransitionEnd = e => {
    if (e.target === this.surface) {
      this.setState({ animating: false });
      const { onReady } = this.props;
      if (onReady) {
        // Custom focus handling
        onReady();
      } else {
        // Legacy focus support
        const button = this.surface.querySelector("[type=button]:last-child");
        if (button) {
          button.focus();
        }
      }
    }
  };

  handleClick = e => {
    e.stopPropagation();
    // Support for legacy button classes
    if (e.target) {
      if (e.target.classList.contains("mdc-dialog__footer__button--accept")) {
        this.props.onAccept();
      }
      if (e.target.classList.contains("mdc-dialog__footer__button--cancel")) {
        this.props.onCancel();
      }
    }
  };

  render() {
    const {
      open,
      className,
      onReady,
      children,
      onCancel,
      onAccept,
      ...other
    } = this.props;

    return (
      <aside
        className={classnames(
          "mdc-dialog",
          {
            "mdc-dialog--animating": this.state.animating,
            "mdc-dialog--open": open
          },
          className
        )}
        role="alertdialog"
        onClick={onCancel}
        onTransitionEnd={this.handleTransitionEnd}
        {...other}
      >
        <div
          className="mdc-dialog__surface"
          ref={surface => {
            this.surface = surface;
          }}
          onClick={this.handleClick}
        >
          {this.props.children}
        </div>
        {open && <div className="mdc-dialog__backdrop" />}
      </aside>
    );
  }
}

export default Dialog;
