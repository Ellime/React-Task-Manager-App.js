import React from "react";
import ReactDOM from "react-dom";
import TestUtils from "react-dom/test-utils";
import {
  Dialog,
  DialogHeader,
  DialogBody,
  DialogFooter,
  DialogFooterButton
} from ".";
import renderer from "react-test-renderer";

class DialogExample extends React.Component {
  render() {
    return (
      <Dialog {...this.props}>
        <DialogHeader>Use Google's location service?</DialogHeader>
        <DialogBody>
          Let Google help apps determine location. This means sending anonymous
          location data to Google, even when no apps are running.
        </DialogBody>
        <DialogFooter>
          <DialogFooterButton cancel>Cancel</DialogFooterButton>
          <DialogFooterButton accept action>
            Accept
          </DialogFooterButton>
        </DialogFooter>
      </Dialog>
    );
  }
}

const simulateTransitionEnd = component => {
  // Simulate the transition end
  const dialog = TestUtils.findRenderedDOMComponentWithClass(
    component,
    "mdc-dialog"
  );
  const surface = TestUtils.findRenderedDOMComponentWithClass(
    component,
    "mdc-dialog__surface"
  );
  // Simulate a transition end
  TestUtils.Simulate.transitionEnd(dialog, { target: surface });
};

it("renders", () => {
  expect(renderer.create(<DialogExample />)).toMatchSnapshot();
});

it("mounts and unmounts", () => {
  const div = document.createElement("div");
  ReactDOM.render(<DialogExample open />, div);
  ReactDOM.render(<DialogExample open={false} />, div);
  ReactDOM.render(<DialogExample open />, div);
  ReactDOM.unmountComponentAtNode(div);
});

it("cancels when ESC is pressed", () => {
  const handleCancel = jest.fn();
  TestUtils.renderIntoDocument(<DialogExample open onCancel={handleCancel} />);

  // Simulate different forms of ESC
  document.dispatchEvent(new KeyboardEvent("keydown", { key: "Escape" }));
  document.dispatchEvent(new KeyboardEvent("keydown", { keyCode: 27 }));

  expect(handleCancel).toHaveBeenCalledTimes(2);
});

it("supports legacy accept and cancel button clicks", () => {
  const handleAccept = jest.fn();
  const handleCancel = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <DialogExample open onAccept={handleAccept} onCancel={handleCancel} />
  );
  // Simulate accept
  const acceptButton = TestUtils.findRenderedDOMComponentWithClass(
    component,
    "mdc-dialog__footer__button--accept"
  );
  TestUtils.Simulate.click(acceptButton);
  expect(handleAccept).toHaveBeenCalled();

  // Simulate cancel
  const cancelButton = TestUtils.findRenderedDOMComponentWithClass(
    component,
    "mdc-dialog__footer__button--cancel"
  );
  TestUtils.Simulate.click(cancelButton);
  expect(handleCancel).toHaveBeenCalled();
});

it("handles the onReady prop", () => {
  const handleReady = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <DialogExample open onReady={handleReady} />
  );
  simulateTransitionEnd(component);
  expect(handleReady).toHaveBeenCalled();
});

it("sets focus to the last button", () => {
  const component = TestUtils.renderIntoDocument(<DialogExample open />);
  simulateTransitionEnd(component);
  // Check focus
  const lastButton = TestUtils.findRenderedDOMComponentWithClass(
    component,
    "mdc-dialog__footer__button--accept"
  );
  expect(document.activeElement === lastButton);
});
