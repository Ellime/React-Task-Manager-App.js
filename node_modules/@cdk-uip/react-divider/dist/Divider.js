"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Divider component. When used on their own they will render using
 * an `hr` element. When used with a `List` they will render as a
 * `li` element.
 */
var Divider = function Divider(_ref) {
  var className = _ref.className,
      element = _ref.element,
      inset = _ref.inset,
      other = _objectWithoutProperties(_ref, ["className", "element", "inset"]);

  var T = element;
  return _react2.default.createElement(T, _extends({
    className: (0, _classnames2.default)("mdc-list-divider", { "mdc-list-divider--inset": inset }, className)
  }, other));
};

Divider.propTypes = {
  /** The element to render (hr, li, etc.) */
  element: _propTypes2.default.string,
  /** Inset divider */
  inset: _propTypes2.default.bool
};

Divider.defaultProps = {
  element: "hr"
};

exports.default = Divider;