"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactList = require("@cdk-uip/react-list");

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * A clickable drawer item with a ripple applied on supported browsers.
 * You can highlight the selected item using the primary theme colour.
 *
 * To display a pointer cursor when the user hovers over the item, add the
 * `href` prop. Note that if you are handling clicks yourself using the
 * `onClick` event you should call `preventDefault` on the event to ensure
 * the href does not get actioned.
 *
 * ```js
 * <DrawerListItem href="#" onClick={e => { e.preventDefault(); }} />
 * ```
 */
var DrawerListItem = function DrawerListItem(_ref) {
  var selected = _ref.selected,
      className = _ref.className,
      children = _ref.children,
      other = _objectWithoutProperties(_ref, ["selected", "className", "children"]);

  return _react2.default.createElement(
    _reactList.NavListItem,
    _extends({
      className: (0, _classnames2.default)({
        "mdc-list-item--activated": selected
      }, className)
    }, other),
    children
  );
};

DrawerListItem.propTypes = {
  /** Indicates that this item is selected. */
  selected: _propTypes.bool
};

exports.default = DrawerListItem;