"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _mdc = require("@material/drawer/dist/mdc.drawer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Temporary drawer that slides in from the side.
 */
var TemporaryDrawer = function (_React$Component) {
  _inherits(TemporaryDrawer, _React$Component);

  function TemporaryDrawer() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TemporaryDrawer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TemporaryDrawer.__proto__ || Object.getPrototypeOf(TemporaryDrawer)).call.apply(_ref, [this].concat(args))), _this), _this.onClose = function () {
      // Don't send the event immediately as the drawer may still
      // be closing and if it is a controlled component then we may
      // end up with multiple close events being sent.
      setTimeout(function () {
        _this.props.onClose && _this.props.onClose();
      }, 0);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TemporaryDrawer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.drawer) {
        // Fix for MDCTemporaryDrawer click handling
        // https://github.com/material-components/material-components-web/issues/1004
        if (!_mdc.MDCTemporaryDrawer.prototype.getDefaultFoundation_) {
          _mdc.MDCTemporaryDrawer.prototype.getDefaultFoundation_ = _mdc.MDCTemporaryDrawer.prototype.getDefaultFoundation;
          _mdc.MDCTemporaryDrawer.prototype.getDefaultFoundation = function () {
            var foundation = this.getDefaultFoundation_();

            foundation.drawerClickHandler_ = function (e) {
              if (e.target.tagName !== "A") {
                e.stopPropagation();
              }
            };

            return foundation;
          };
        }

        this.MDCComponent = new _mdc.MDCTemporaryDrawer(this.drawer);
        this.MDCComponent.listen("MDCTemporaryDrawer:close", this.onClose);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.MDCComponent) {
        this.MDCComponent.unlisten("MDCTemporaryDrawer:close", this.onClose);
        this.MDCComponent.destroy();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.open !== prevProps.open) {
        this.MDCComponent.open = this.props.open;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          children = _props.children,
          onClose = _props.onClose,
          other = _objectWithoutProperties(_props, ["className", "children", "onClose"]);

      return _react2.default.createElement(
        "aside",
        _extends({
          className: (0, _classnames2.default)("mdc-drawer", "mdc-drawer--temporary", "mdc-typography", className),
          ref: function ref(drawer) {
            _this2.drawer = drawer;
          }
        }, other),
        _react2.default.createElement(
          "nav",
          { className: "mdc-drawer__drawer" },
          this.props.children
        )
      );
    }
  }]);

  return TemporaryDrawer;
}(_react2.default.Component);

exports.default = TemporaryDrawer;