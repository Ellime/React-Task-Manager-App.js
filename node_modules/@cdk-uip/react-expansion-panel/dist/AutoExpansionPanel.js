"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _ExpansionPanelHeader = require("./ExpansionPanelHeader");

var _ExpansionPanelHeader2 = _interopRequireDefault(_ExpansionPanelHeader);

var _ExpansionPanelContent = require("./ExpansionPanelContent");

var _ExpansionPanelContent2 = _interopRequireDefault(_ExpansionPanelContent);

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Used to create a panel within an `<AutoExpansionPanelGroup>`
 */
var AutoExpansionPanel = function AutoExpansionPanel(_ref) {
  var className = _ref.className,
      expanded = _ref.expanded,
      _onClick = _ref.onClick,
      panelId = _ref.panelId,
      children = _ref.children,
      other = _objectWithoutProperties(_ref, ["className", "expanded", "onClick", "panelId", "children"]);

  return _react2.default.createElement(
    "div",
    _extends({
      className: (0, _classnames2.default)("cdk-expansion-panel", { "cdk-expansion-panel--expanded": expanded }, className)
    }, other),
    _react.Children.map(children, function (child) {
      if (child.type === _ExpansionPanelHeader2.default) {
        return (0, _react.cloneElement)(child, {
          onClick: function onClick(e) {
            _onClick(panelId);
            child.props.onClick && child.props.onClick(e);
          }
        });
      }
      if (child.type === _ExpansionPanelContent2.default) {
        return (0, _react.cloneElement)(child, { expanded: expanded });
      }
      return child;
    })
  );
};

AutoExpansionPanel.propTypes = {
  /** Panel is expanded. */
  expanded: _propTypes.bool
};

exports.default = AutoExpansionPanel;