"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable react/no-deprecated */


/**
 * An expansion panel is a lightweight container that may either stand
 * alone or be connected to a larger surface, such as a card.
 */
var AutoExpansionPanelGroup = function (_Component) {
  _inherits(AutoExpansionPanelGroup, _Component);

  function AutoExpansionPanelGroup() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, AutoExpansionPanelGroup);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AutoExpansionPanelGroup.__proto__ || Object.getPrototypeOf(AutoExpansionPanelGroup)).call.apply(_ref, [this].concat(args))), _this), _this.state = { expanded: {} }, _this.expanded = function (_ref2, state) {
      var children = _ref2.children,
          singleExpand = _ref2.singleExpand;
      return _react.Children.map(children, function (_ref3, index) {
        var props = _ref3.props;
        return {
          index: index,
          expanded: typeof props.expanded !== "undefined" ? props.expanded : state.expanded[index] || false
        };
      })
      // We only need expanded panels
      .filter(function (child) {
        return child.expanded;
      })
      // If singleExpand is enabled then reduce to first expanded panel
      .reduce(function (a, child) {
        return singleExpand ? a.length ? a : [child] : [].concat(_toConsumableArray(a), [child]);
      }, [])
      // Convert to the object that ends up in the state
      .reduce(function (o, _ref4) {
        var index = _ref4.index;
        return Object.assign({}, o, _defineProperty({}, index, true));
      }, {});
    }, _this.handleClick = function (index) {
      // Toggle expansion
      _this.setState(function (state) {
        return {
          expanded: Object.assign({}, _this.props.singleExpand ? {} : state.expanded, _defineProperty({}, index, state.expanded[index] ? !state.expanded[index] : true))
        };
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(AutoExpansionPanelGroup, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // Look for any initially expanded panels
      this.setState({
        expanded: this.expanded(this.props, this.state)
      });
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      // If the singleExpand prop changes then just collapse everything.
      // Otherwise update the expansion state.
      this.setState(function (state) {
        return {
          expanded: nextProps.singleExpand !== _this2.props.singleExpand ? {} : _this2.expanded(nextProps, state)
        };
      });
    }

    // Generate an object map for the expansion state of each child.
    // If no 'expanded' prop is specified then use the current value
    // from the state.

  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          singleExpand = _props.singleExpand,
          className = _props.className,
          children = _props.children,
          other = _objectWithoutProperties(_props, ["singleExpand", "className", "children"]);

      return _react2.default.createElement(
        "div",
        _extends({
          className: (0, _classnames2.default)("cdk-expansion-panel-group", className)
        }, other),
        _react.Children.map(children, function (child, index) {
          return _react2.default.cloneElement(child, {
            onClick: _this3.handleClick,
            panelId: index,
            expanded: _this3.state.expanded[index] || false
          });
        })
      );
    }
  }]);

  return AutoExpansionPanelGroup;
}(_react.Component);

AutoExpansionPanelGroup.propTypes = {
  /** When **true** only a single panel can be open at a time. */
  singleExpand: _propTypes.bool
};
AutoExpansionPanelGroup.defaultProps = {
  singleExpand: true
};
exports.default = AutoExpansionPanelGroup;