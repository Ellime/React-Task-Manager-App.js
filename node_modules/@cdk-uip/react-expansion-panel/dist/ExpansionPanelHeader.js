"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _ExpansionPanelHeaderIndicator = require("./ExpansionPanelHeaderIndicator");

var _ExpansionPanelHeaderIndicator2 = _interopRequireDefault(_ExpansionPanelHeaderIndicator);

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * The expansion panel header contains the title, optional description text
 * and the indicator icon.
 *
 * Use this to wrap `<ExpansionPanelHeaderTitle>` and `<ExpansionPanelHeaderDescription>`
 * components.
 */
var ExpansionPanelHeader = function ExpansionPanelHeader(_ref) {
  var className = _ref.className,
      indicator = _ref.indicator,
      children = _ref.children,
      other = _objectWithoutProperties(_ref, ["className", "indicator", "children"]);

  return _react2.default.createElement(
    "div",
    _extends({
      className: (0, _classnames2.default)("cdk-expansion-panel__header", className)
    }, other),
    children,
    indicator
  );
};

ExpansionPanelHeader.propTypes = {
  /**
   * The indicator to display. The default is `<ExpansionPanelHeaderIndicator />` and
   * should be suitable but you can use this prop to supply your own component.
   */
  indicator: _propTypes.node
};

ExpansionPanelHeader.defaultProps = {
  indicator: _react2.default.createElement(_ExpansionPanelHeaderIndicator2.default, null)
};

exports.default = ExpansionPanelHeader;