/* eslint-disable react/no-deprecated */
import React, { Component, Children } from "react";
import classnames from "classnames";
import { bool } from "prop-types";

/**
 * An expansion panel is a lightweight container that may either stand
 * alone or be connected to a larger surface, such as a card.
 */
export default class AutoExpansionPanelGroup extends Component {
  state = { expanded: {} };

  static propTypes = {
    /** When **true** only a single panel can be open at a time. */
    singleExpand: bool
  };

  static defaultProps = {
    singleExpand: true
  };

  componentDidMount() {
    // Look for any initially expanded panels
    this.setState({
      expanded: this.expanded(this.props, this.state)
    });
  }

  componentWillReceiveProps(nextProps) {
    // If the singleExpand prop changes then just collapse everything.
    // Otherwise update the expansion state.
    this.setState(state => ({
      expanded:
        nextProps.singleExpand !== this.props.singleExpand
          ? {}
          : this.expanded(nextProps, state)
    }));
  }

  // Generate an object map for the expansion state of each child.
  // If no 'expanded' prop is specified then use the current value
  // from the state.
  expanded = ({ children, singleExpand }, state) =>
    Children.map(children, ({ props }, index) => ({
      index,
      expanded:
        typeof props.expanded !== "undefined"
          ? props.expanded
          : state.expanded[index] || false
    }))
      // We only need expanded panels
      .filter(child => child.expanded)
      // If singleExpand is enabled then reduce to first expanded panel
      .reduce(
        (a, child) => (singleExpand ? (a.length ? a : [child]) : [...a, child]),
        []
      )
      // Convert to the object that ends up in the state
      .reduce(
        (o, { index }) => ({
          ...o,
          [index]: true
        }),
        {}
      );

  handleClick = index => {
    // Toggle expansion
    this.setState(state => ({
      expanded: {
        ...(this.props.singleExpand ? {} : state.expanded),
        [index]: state.expanded[index] ? !state.expanded[index] : true
      }
    }));
  };

  render() {
    const { singleExpand, className, children, ...other } = this.props;
    return (
      <div
        className={classnames("cdk-expansion-panel-group", className)}
        {...other}
      >
        {Children.map(children, (child, index) =>
          React.cloneElement(child, {
            onClick: this.handleClick,
            panelId: index,
            expanded: this.state.expanded[index] || false
          })
        )}
      </div>
    );
  }
}
