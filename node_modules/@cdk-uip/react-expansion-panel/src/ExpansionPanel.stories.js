import React, { Fragment } from "react";
import {
  ExpansionPanelGroup,
  ExpansionPanel,
  ExpansionPanelHeader,
  ExpansionPanelHeaderTitle,
  ExpansionPanelHeaderSubtitle,
  ExpansionPanelHeaderDescription,
  ExpansionPanelContent,
  ExpansionPanelContentBody,
  ExpansionPanelContentActions,
  AutoExpansionPanelGroup,
  AutoExpansionPanel
} from ".";
import { TextField } from "@cdk-uip/react-text-field";
import { Button } from "@cdk-uip/react-button";
import { storiesOf } from "@storybook/react";
import { withKnobs, boolean } from "@storybook/addon-knobs";

const CustomIndicator = () => (
  <span className="header-expansion-indicator">
    <i className="cdkicon-add" />
  </span>
);

storiesOf("expansion-panel", module)
  .addDecorator(withKnobs)
  .add("controlled (single selection)", () => {
    class Controlled extends React.Component {
      state = { expandedIndex: -1 };

      render() {
        return (
          <ExpansionPanelGroup>
            {[...Array(10).keys()].map(index => (
              <ExpansionPanel
                key={index}
                expanded={this.state.expandedIndex === index}
              >
                <ExpansionPanelHeader
                  onClick={() => {
                    this.setState({
                      expandedIndex:
                        this.state.expandedIndex === index ? -1 : index
                    });
                  }}
                >
                  <ExpansionPanelHeaderTitle>Title</ExpansionPanelHeaderTitle>
                  <ExpansionPanelHeaderDescription>
                    Description
                  </ExpansionPanelHeaderDescription>
                </ExpansionPanelHeader>
                <ExpansionPanelContent
                  expanded={this.state.expandedIndex === index}
                >
                  <ExpansionPanelContentBody>
                    <TextField label="Sample text field" boxFocus={false} />
                  </ExpansionPanelContentBody>
                  <ExpansionPanelContentActions>
                    <Button>Cancel</Button>
                    <Button primary>Save</Button>
                  </ExpansionPanelContentActions>
                </ExpansionPanelContent>
              </ExpansionPanel>
            ))}
          </ExpansionPanelGroup>
        );
      }
    }
    return <Controlled />;
  })
  .add("controlled (multiple selection)", () => {
    class Controlled extends React.Component {
      state = {
        panels: [...Array(10).keys()].map(index => ({
          id: index,
          expanded: false
        }))
      };

      toggle(expanded) {
        this.setState(prevState => ({
          panels: prevState.panels.map(panel => ({
            ...panel,
            expanded
          }))
        }));
      }

      render() {
        return (
          <Fragment>
            <div style={{ marginBottom: "1rem" }}>
              <Button onClick={() => this.toggle(true)}>Expand All</Button>
              <Button onClick={() => this.toggle(false)}>Collapse All</Button>
            </div>

            <ExpansionPanelGroup>
              {this.state.panels.map(({ id, expanded }) => (
                <ExpansionPanel key={id} expanded={expanded}>
                  <ExpansionPanelHeader
                    onClick={() => {
                      this.setState(prevState => ({
                        panels: prevState.panels.map(panel => {
                          if (panel.id === id) {
                            return { ...panel, expanded: !panel.expanded };
                          }
                          return panel;
                        })
                      }));
                    }}
                  >
                    <ExpansionPanelHeaderTitle>Title</ExpansionPanelHeaderTitle>
                    <ExpansionPanelHeaderDescription>
                      Description
                    </ExpansionPanelHeaderDescription>
                  </ExpansionPanelHeader>
                  <ExpansionPanelContent expanded={expanded}>
                    <ExpansionPanelContentBody>
                      <TextField label="Sample text field" boxFocus={false} />
                    </ExpansionPanelContentBody>
                    <ExpansionPanelContentActions>
                      <Button>Cancel</Button>
                      <Button primary>Save</Button>
                    </ExpansionPanelContentActions>
                  </ExpansionPanelContent>
                </ExpansionPanel>
              ))}
            </ExpansionPanelGroup>
          </Fragment>
        );
      }
    }
    return <Controlled />;
  })
  .add("auto", () => {
    const indicator = boolean("Custom indicator", false);
    return (
      <AutoExpansionPanelGroup singleExpand={boolean("singleExpand", true)}>
        <AutoExpansionPanel>
          <ExpansionPanelHeader
            indicator={indicator ? <CustomIndicator /> : undefined}
          >
            <ExpansionPanelHeaderTitle>Title</ExpansionPanelHeaderTitle>
            <ExpansionPanelHeaderDescription>
              Description
            </ExpansionPanelHeaderDescription>
          </ExpansionPanelHeader>
          <ExpansionPanelContent>
            <ExpansionPanelContentBody>
              <TextField label="Sample text field" boxFocus={false} />
            </ExpansionPanelContentBody>
            <ExpansionPanelContentActions>
              <Button>Cancel</Button>
              <Button primary>Save</Button>
            </ExpansionPanelContentActions>
          </ExpansionPanelContent>
        </AutoExpansionPanel>

        <AutoExpansionPanel>
          <ExpansionPanelHeader>
            <ExpansionPanelHeaderTitle>Title</ExpansionPanelHeaderTitle>
            <ExpansionPanelHeaderDescription>
              Description
            </ExpansionPanelHeaderDescription>
            <ExpansionPanelHeaderDescription>
              Another description
            </ExpansionPanelHeaderDescription>
          </ExpansionPanelHeader>
          <ExpansionPanelContent>
            <ExpansionPanelContentBody>Body content</ExpansionPanelContentBody>
          </ExpansionPanelContent>
        </AutoExpansionPanel>

        <AutoExpansionPanel>
          <ExpansionPanelHeader>
            <ExpansionPanelHeaderTitle>
              Title
              <ExpansionPanelHeaderSubtitle>
                Subtitle
              </ExpansionPanelHeaderSubtitle>
            </ExpansionPanelHeaderTitle>
            <ExpansionPanelHeaderDescription>
              Description
            </ExpansionPanelHeaderDescription>
          </ExpansionPanelHeader>
          <ExpansionPanelContent>
            <ExpansionPanelContentBody>Body content</ExpansionPanelContentBody>
          </ExpansionPanelContent>
        </AutoExpansionPanel>
      </AutoExpansionPanelGroup>
    );
  })
  .add("dynamic panels", () => {
    class Async extends React.Component {
      state = { panels: [] };

      render() {
        return (
          <div>
            <button
              className="mdc-button"
              onClick={() =>
                this.setState({
                  panels: [...Array(10).keys()]
                })
              }
            >
              Load
            </button>
            <AutoExpansionPanelGroup>
              {this.state.panels.map((panel, index) => (
                <AutoExpansionPanel key={index}>
                  <ExpansionPanelHeader>
                    <ExpansionPanelHeaderTitle>
                      Title {index + 1}
                    </ExpansionPanelHeaderTitle>
                    <ExpansionPanelHeaderDescription>
                      Description {index + 1}
                    </ExpansionPanelHeaderDescription>
                  </ExpansionPanelHeader>
                  <ExpansionPanelContent>
                    <ExpansionPanelContentBody>
                      Body content {index + 1}
                    </ExpansionPanelContentBody>
                  </ExpansionPanelContent>
                </AutoExpansionPanel>
              ))}
            </AutoExpansionPanelGroup>
          </div>
        );
      }
    }
    return <Async />;
  })
  .add("expanding panels", () => {
    class Controlled extends React.Component {
      state = { expanded: false };

      render() {
        return (
          <div>
            <button
              className="mdc-button"
              onClick={() =>
                this.setState(state => ({ expanded: !state.expanded }))
              }
            >
              Toggle
            </button>
            <AutoExpansionPanelGroup singleExpand={true}>
              <AutoExpansionPanel expanded={this.state.expanded}>
                <ExpansionPanelHeader
                  onClick={() =>
                    this.setState(state => ({ expanded: !state.expanded }))
                  }
                >
                  <ExpansionPanelHeaderTitle>Title</ExpansionPanelHeaderTitle>
                  <ExpansionPanelHeaderDescription>
                    Description
                  </ExpansionPanelHeaderDescription>
                  <ExpansionPanelHeaderDescription>
                    Another description
                  </ExpansionPanelHeaderDescription>
                </ExpansionPanelHeader>
                <ExpansionPanelContent>
                  <ExpansionPanelContentBody>
                    Body content
                  </ExpansionPanelContentBody>
                </ExpansionPanelContent>
              </AutoExpansionPanel>

              <AutoExpansionPanel>
                <ExpansionPanelHeader>
                  <ExpansionPanelHeaderTitle>Title</ExpansionPanelHeaderTitle>
                  <ExpansionPanelHeaderDescription>
                    Description
                  </ExpansionPanelHeaderDescription>
                  <ExpansionPanelHeaderDescription>
                    Another description
                  </ExpansionPanelHeaderDescription>
                </ExpansionPanelHeader>
                <ExpansionPanelContent>
                  <ExpansionPanelContentBody>
                    Body content
                  </ExpansionPanelContentBody>
                </ExpansionPanelContent>
              </AutoExpansionPanel>
            </AutoExpansionPanelGroup>
          </div>
        );
      }
    }
    return <Controlled />;
  })
  .add("custom panel height", () => {
    class Controlled extends React.Component {
      state = { showContent: false };

      render() {
        return (
          <div>
            <AutoExpansionPanelGroup singleExpand={true}>
              <AutoExpansionPanel>
                <ExpansionPanelHeader>
                  <ExpansionPanelHeaderTitle>Title</ExpansionPanelHeaderTitle>
                  <ExpansionPanelHeaderDescription>
                    Description
                  </ExpansionPanelHeaderDescription>
                  <ExpansionPanelHeaderDescription>
                    Another description
                  </ExpansionPanelHeaderDescription>
                </ExpansionPanelHeader>
                <ExpansionPanelContent expandedHeight="auto">
                  <ExpansionPanelContentBody>
                    <button
                      className="mdc-button"
                      onClick={() =>
                        this.setState(state => ({
                          showContent: !state.showContent
                        }))
                      }
                    >
                      Toggle content
                    </button>
                    {this.state.showContent && (
                      <div style={{ height: 200 }}>Content</div>
                    )}
                  </ExpansionPanelContentBody>
                </ExpansionPanelContent>
              </AutoExpansionPanel>

              <AutoExpansionPanel>
                <ExpansionPanelHeader>
                  <ExpansionPanelHeaderTitle>Title</ExpansionPanelHeaderTitle>
                  <ExpansionPanelHeaderDescription>
                    Description
                  </ExpansionPanelHeaderDescription>
                  <ExpansionPanelHeaderDescription>
                    Another description
                  </ExpansionPanelHeaderDescription>
                </ExpansionPanelHeader>
                <ExpansionPanelContent>
                  <ExpansionPanelContentBody>
                    Body content
                  </ExpansionPanelContentBody>
                </ExpansionPanelContent>
              </AutoExpansionPanel>
            </AutoExpansionPanelGroup>
          </div>
        );
      }
    }
    return <Controlled />;
  });
