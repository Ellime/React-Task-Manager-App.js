import React from "react";
import ReactDOM from "react-dom";
import TestUtils from "react-dom/test-utils";
import {
  AutoExpansionPanelGroup,
  AutoExpansionPanel,
  ExpansionPanelGroup,
  ExpansionPanel,
  ExpansionPanelHeader,
  ExpansionPanelHeaderTitle,
  ExpansionPanelHeaderSubtitle,
  ExpansionPanelHeaderDescription,
  ExpansionPanelContent,
  ExpansionPanelContentBody,
  ExpansionPanelContentActions
} from ".";
import { Button } from "@cdk-uip/react-button";
import renderer from "react-test-renderer";

it("renders", () => {
  expect(
    renderer.create(
      <ExpansionPanelGroup>
        <ExpansionPanel expanded>
          <ExpansionPanelHeader indicator={<span>Custom</span>}>
            <ExpansionPanelHeaderTitle>
              Title
              <ExpansionPanelHeaderSubtitle>
                Subtitle
              </ExpansionPanelHeaderSubtitle>
            </ExpansionPanelHeaderTitle>
            <ExpansionPanelHeaderDescription>
              Description
            </ExpansionPanelHeaderDescription>
            <ExpansionPanelHeaderDescription>
              Another description
            </ExpansionPanelHeaderDescription>
          </ExpansionPanelHeader>
          <ExpansionPanelContent expandedHeight="auto">
            <ExpansionPanelContentBody>Body content</ExpansionPanelContentBody>
            <ExpansionPanelContentActions>
              <Button>Cancel</Button>
              <Button primary>Save</Button>
            </ExpansionPanelContentActions>
          </ExpansionPanelContent>
        </ExpansionPanel>

        <ExpansionPanel>
          <ExpansionPanelHeader>
            <ExpansionPanelHeaderTitle>Title</ExpansionPanelHeaderTitle>
            <ExpansionPanelHeaderDescription>
              Description
            </ExpansionPanelHeaderDescription>
            <ExpansionPanelHeaderDescription>
              Another description
            </ExpansionPanelHeaderDescription>
          </ExpansionPanelHeader>
          <ExpansionPanelContent>
            <ExpansionPanelContentBody>Body content</ExpansionPanelContentBody>
          </ExpansionPanelContent>
        </ExpansionPanel>

        <ExpansionPanel>
          <ExpansionPanelHeader>
            <ExpansionPanelHeaderTitle>
              Title
              <ExpansionPanelHeaderSubtitle>
                Subtitle
              </ExpansionPanelHeaderSubtitle>
            </ExpansionPanelHeaderTitle>
            <ExpansionPanelHeaderDescription>
              Description
            </ExpansionPanelHeaderDescription>
          </ExpansionPanelHeader>
          <ExpansionPanelContent>
            <ExpansionPanelContentBody>Body content</ExpansionPanelContentBody>
          </ExpansionPanelContent>
        </ExpansionPanel>
      </ExpansionPanelGroup>
    )
  ).toMatchSnapshot();
});

it("renders an auto expansion panel", () => {
  expect(
    renderer.create(
      <AutoExpansionPanelGroup>
        <AutoExpansionPanel>
          <ExpansionPanelHeader>
            <ExpansionPanelHeaderTitle>Title</ExpansionPanelHeaderTitle>
            <ExpansionPanelHeaderDescription>
              Description
            </ExpansionPanelHeaderDescription>
            <ExpansionPanelHeaderDescription>
              Another description
            </ExpansionPanelHeaderDescription>
          </ExpansionPanelHeader>
          <ExpansionPanelContent>
            <ExpansionPanelContentBody>Body content</ExpansionPanelContentBody>
          </ExpansionPanelContent>
        </AutoExpansionPanel>

        <AutoExpansionPanel>
          <ExpansionPanelHeader>
            <ExpansionPanelHeaderTitle>Title</ExpansionPanelHeaderTitle>
            <ExpansionPanelHeaderDescription>
              Description
            </ExpansionPanelHeaderDescription>
            <ExpansionPanelHeaderDescription>
              Another description
            </ExpansionPanelHeaderDescription>
          </ExpansionPanelHeader>
          <ExpansionPanelContent>
            <ExpansionPanelContentBody>Body content</ExpansionPanelContentBody>
          </ExpansionPanelContent>
          <div />
        </AutoExpansionPanel>
      </AutoExpansionPanelGroup>
    )
  ).toMatchSnapshot();
});

it("handles clicks on an auto expansion panel", () => {
  class Wrapper extends React.Component {
    render() {
      return (
        <AutoExpansionPanel onClick={this.props.onClick} panelId={1}>
          <ExpansionPanelHeader onClick={this.props.onHeaderClick}>
            <ExpansionPanelHeaderTitle>Title</ExpansionPanelHeaderTitle>
          </ExpansionPanelHeader>
          <ExpansionPanelContent>
            <ExpansionPanelContentBody>Body content</ExpansionPanelContentBody>
          </ExpansionPanelContent>
        </AutoExpansionPanel>
      );
    }
  }

  const handleClick = jest.fn();
  const handleHeaderClick = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <Wrapper onClick={handleClick} onHeaderClick={handleHeaderClick} />
  );
  // Click on the header
  const header = TestUtils.findRenderedDOMComponentWithClass(
    component,
    "cdk-expansion-panel__header"
  );
  TestUtils.Simulate.click(header);
  expect(handleClick).toHaveBeenCalledWith(1);
  expect(handleHeaderClick).toHaveBeenCalled();
});

it("handles custom content height", () => {
  const component = TestUtils.renderIntoDocument(
    <ExpansionPanelContent expanded expandedHeight="auto" />
  );
  const content = TestUtils.findRenderedDOMComponentWithClass(
    component,
    "cdk-expansion-panel__content"
  );
  expect(content.style.height).toBe("auto");
});

it("syncs the height and expanded state", () => {
  const div = document.createElement("div");
  ReactDOM.render(<ExpansionPanelContent expanded />, div);
  ReactDOM.render(
    <ExpansionPanelContent expanded expandedHeight="200px" />,
    div
  );
  ReactDOM.render(
    <ExpansionPanelContent expanded={false} expandedHeight="200px" />,
    div
  );
  ReactDOM.unmountComponentAtNode(div);
});

it("supports a single expanding auto group", () => {
  const component = TestUtils.renderIntoDocument(
    <AutoExpansionPanelGroup singleExpand>
      <AutoExpansionPanel>
        <ExpansionPanelHeader>
          <ExpansionPanelHeaderTitle>Title</ExpansionPanelHeaderTitle>
        </ExpansionPanelHeader>
        <ExpansionPanelContent>
          <ExpansionPanelContentBody>Body content</ExpansionPanelContentBody>
        </ExpansionPanelContent>
      </AutoExpansionPanel>

      <AutoExpansionPanel>
        <ExpansionPanelHeader>
          <ExpansionPanelHeaderTitle>Title</ExpansionPanelHeaderTitle>
        </ExpansionPanelHeader>
        <ExpansionPanelContent>
          <ExpansionPanelContentBody>Body content</ExpansionPanelContentBody>
        </ExpansionPanelContent>
      </AutoExpansionPanel>
    </AutoExpansionPanelGroup>
  );

  const panels = TestUtils.scryRenderedDOMComponentsWithClass(
    component,
    "cdk-expansion-panel"
  );
  const headers = TestUtils.scryRenderedDOMComponentsWithClass(
    component,
    "cdk-expansion-panel__header"
  );

  // Expand the first panel
  TestUtils.Simulate.click(headers[0]);
  expect(panels[0].classList.contains("cdk-expansion-panel--expanded")).toBe(
    true
  );
  expect(panels[1].classList.contains("cdk-expansion-panel--expanded")).toBe(
    false
  );

  // Expand the second panel
  TestUtils.Simulate.click(headers[1]);
  expect(panels[0].classList.contains("cdk-expansion-panel--expanded")).toBe(
    false
  );
  expect(panels[1].classList.contains("cdk-expansion-panel--expanded")).toBe(
    true
  );
});

it("supports a multiple expanding auto group", () => {
  const component = TestUtils.renderIntoDocument(
    <AutoExpansionPanelGroup singleExpand={false}>
      <AutoExpansionPanel>
        <ExpansionPanelHeader>
          <ExpansionPanelHeaderTitle>Title</ExpansionPanelHeaderTitle>
        </ExpansionPanelHeader>
        <ExpansionPanelContent>
          <ExpansionPanelContentBody>Body content</ExpansionPanelContentBody>
        </ExpansionPanelContent>
      </AutoExpansionPanel>

      <AutoExpansionPanel>
        <ExpansionPanelHeader>
          <ExpansionPanelHeaderTitle>Title</ExpansionPanelHeaderTitle>
        </ExpansionPanelHeader>
        <ExpansionPanelContent>
          <ExpansionPanelContentBody>Body content</ExpansionPanelContentBody>
        </ExpansionPanelContent>
      </AutoExpansionPanel>
    </AutoExpansionPanelGroup>
  );

  const panels = TestUtils.scryRenderedDOMComponentsWithClass(
    component,
    "cdk-expansion-panel"
  );
  const headers = TestUtils.scryRenderedDOMComponentsWithClass(
    component,
    "cdk-expansion-panel__header"
  );

  // Expand the first panel
  TestUtils.Simulate.click(headers[0]);
  expect(panels[0].classList.contains("cdk-expansion-panel--expanded")).toBe(
    true
  );
  expect(panels[1].classList.contains("cdk-expansion-panel--expanded")).toBe(
    false
  );

  // Expand the second panel
  TestUtils.Simulate.click(headers[1]);
  expect(panels[0].classList.contains("cdk-expansion-panel--expanded")).toBe(
    true
  );
  expect(panels[1].classList.contains("cdk-expansion-panel--expanded")).toBe(
    true
  );
});
