"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames2 = require("classnames");

var _classnames3 = _interopRequireDefault(_classnames2);

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * A fluid row layout container.
 *
 * Compared to `LayoutGrid`, which is a grid where each cell is equal width, the width of each `FluidItem` is based on their content. `LayoutGrid` sets the size for each cell which is great for instance for laying out cards into equal width columns. However, having to decide the number of columns is not practical if the content already has the right width. In that case you can use `Fluid` to just lay that content out in row using the provided horizontal and vertical alignment properties.
 *
 * Note: Like `LayoutGrid` this is just a layout utility and does not add anything visual.
 */
var Fluid = function Fluid(_ref) {
  var _classnames;

  var wrap = _ref.wrap,
      halign = _ref.halign,
      valign = _ref.valign,
      className = _ref.className,
      children = _ref.children,
      other = _objectWithoutProperties(_ref, ["wrap", "halign", "valign", "className", "children"]);

  return _react2.default.createElement(
    "div",
    _extends({
      className: (0, _classnames3.default)("cdk-fluid", (_classnames = {}, _defineProperty(_classnames, "cdk-fluid--wrap-" + wrap, wrap), _defineProperty(_classnames, "cdk-fluid--halign-" + halign, halign), _defineProperty(_classnames, "cdk-fluid--valign-" + valign, valign), _classnames), className)
    }, other),
    children
  );
};

Fluid.propTypes = {
  /** Specifies how to handle items when the items inside are wider than the container. Default value is `content`. */
  wrap: (0, _propTypes.oneOf)(["content", "items", "nowrap"]),
  /** Horizontal alignment of the items. Default value is `stretch`. */
  halign: (0, _propTypes.oneOf)(["stretch", "left", "center", "right"]),
  /** Vertical alignment of the items. Default value is `stretch`. */
  valign: (0, _propTypes.oneOf)(["stretch", "top", "middle", "bottom"])
};

exports.default = Fluid;