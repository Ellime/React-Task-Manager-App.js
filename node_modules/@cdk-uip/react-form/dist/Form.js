"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Simple form with HTML5 `checkValidity` support.
 *
 * Supply an `onSubmit` prop and include a submit button. When the button
 * is clicked or `<Enter>` is pressed the `onSubmit` function is called if
 * all `TextField` components on the form are valid.
 *
 * If any `TextField` components are invalid then they will be displayed in their
 * error state and `onSubmit` will not be called.
 */
var Form = function (_React$Component) {
  _inherits(Form, _React$Component);

  function Form() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Form);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Form.__proto__ || Object.getPrototypeOf(Form)).call.apply(_ref, [this].concat(args))), _this), _this.onSubmit = function (e) {
      e.preventDefault();
      if (e.target.checkValidity()) {
        _this.props.onSubmit(e);
      }
    }, _this.onInvalid = function (e) {
      e.preventDefault();
      // Something is not right, execute onInvalid callback
      _this.props.onInvalid(e);

      // Mark as invalid if this is a TextField
      if (e.target.classList.contains("mdc-text-field__input")) {
        e.target.parentNode.classList.add("mdc-text-field--invalid");
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Form, [{
    key: "render",
    value: function render() {
      return _react2.default.createElement(
        "form",
        {
          noValidate: true,
          onSubmit: this.onSubmit,
          onInvalid: this.onInvalid,
          className: this.props.className
        },
        this.props.children
      );
    }
  }]);

  return Form;
}(_react2.default.Component);

Form.propTypes = {
  /** Called when submitting the form if all `TextField` components are valid */
  onSubmit: _propTypes.func.isRequired,
  /** Called when any of the form's fields are invalid */
  onInvalid: _propTypes.func
};
Form.defaultProps = {
  onInvalid: function onInvalid() {
    return {};
  }
};
exports.default = Form;