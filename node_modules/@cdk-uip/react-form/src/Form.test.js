import React from "react";
import TestUtils from "react-dom/test-utils";
import renderer from "react-test-renderer";
import { Form } from ".";
import { TextField } from "@cdk-uip/react-text-field";
import { Button } from "@cdk-uip/react-button";

it("renders", () => {
  expect(
    renderer.create(
      <Form onSubmit={() => {}}>
        <TextField id="name" required />
        <Button type="submit">Submit</Button>
      </Form>
    )
  ).toMatchSnapshot();
});

it("renders with custom class", () => {
  expect(
    renderer.create(
      <Form onSubmit={() => {}} className="my-form">
        <TextField id="name" required />
        <Button type="submit">Submit</Button>
      </Form>
    )
  ).toMatchSnapshot();
});

it("does not submit without validity", () => {
  const onSubmit = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <Form onSubmit={onSubmit}>
      <TextField id="name" required />
      <Button type="submit">Submit</Button>
    </Form>
  );
  const form = TestUtils.findRenderedDOMComponentWithTag(component, "form");
  TestUtils.Simulate.submit(form, {
    target: {
      checkValidity: () => false
    }
  });
  expect(onSubmit).not.toHaveBeenCalled();
});

it("executes onInvalid callback prop", () => {
  const onSubmit = jest.fn();
  const onInvalid = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <Form onSubmit={onSubmit} onInvalid={onInvalid}>
      <TextField id="name" required />
      <Button type="submit">Submit</Button>
    </Form>
  );
  const form = TestUtils.findRenderedDOMComponentWithTag(component, "form");
  TestUtils.Simulate.invalid(form);
  expect(onInvalid).toHaveBeenCalled();
});

it("submits when valid", () => {
  const onSubmit = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <Form onSubmit={onSubmit}>
      <TextField id="name" required />
      <Button type="submit">Submit</Button>
    </Form>
  );
  const form = TestUtils.findRenderedDOMComponentWithTag(component, "form");
  TestUtils.Simulate.submit(form, {
    target: {
      checkValidity: () => true
    }
  });
  expect(onSubmit).toHaveBeenCalled();
});

it("marks text fields as invalid", () => {
  const onSubmit = jest.fn();
  const onInvalid = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <Form onSubmit={onSubmit} onInvalid={onInvalid}>
      <TextField id="name" required />
      <Button type="submit">Submit</Button>
    </Form>
  );
  let invalid = TestUtils.scryRenderedDOMComponentsWithClass(
    component,
    "mdc-text-field--invalid"
  );
  expect(invalid.length).toBe(0);
  const input = TestUtils.findRenderedDOMComponentWithClass(
    component,
    "mdc-text-field__input"
  );
  component.onInvalid({ target: input, preventDefault: () => ({}) });
  invalid = TestUtils.scryRenderedDOMComponentsWithClass(
    component,
    "mdc-text-field--invalid"
  );
  expect(invalid.length).toBe(1);
});
