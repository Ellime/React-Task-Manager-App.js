"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames2 = require("classnames");

var _classnames3 = _interopRequireDefault(_classnames2);

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Image grid
 */
var GridList = function GridList(_ref) {
  var className = _ref.className,
      tileGutter1 = _ref.tileGutter1,
      headerCaption = _ref.headerCaption,
      twoLineCaption = _ref.twoLineCaption,
      iconAlign = _ref.iconAlign,
      aspectRatio = _ref.aspectRatio,
      children = _ref.children,
      other = _objectWithoutProperties(_ref, ["className", "tileGutter1", "headerCaption", "twoLineCaption", "iconAlign", "aspectRatio", "children"]);

  return _react2.default.createElement(
    "div",
    _extends({
      className: (0, _classnames3.default)("mdc-grid-list", _defineProperty({
        "mdc-grid-list--tile-gutter-1": tileGutter1,
        "mdc-grid-list--header-caption": headerCaption,
        "mdc-grid-list--twoline-caption": twoLineCaption,
        "mdc-grid-list--with-icon-align-start": iconAlign === "start",
        "mdc-grid-list--with-icon-align-end": iconAlign === "end"
      }, "mdc-grid-list--tile-aspect-" + aspectRatio, aspectRatio), className)
    }, other),
    children
  );
};

GridList.propTypes = {
  /** Use a 1px gutter. */
  tileGutter1: _propTypes.bool,
  /** Display the caption in the header instead of the footer. */
  headerCaption: _propTypes.bool,
  /** Support two-line captions via support text */
  twoLineCaption: _propTypes.bool,
  /** Icon alignment (start = before text, end = after text) */
  iconAlign: (0, _propTypes.oneOf)(["start", "end"]),
  /** Image aspect ratio (default is 1x1) */
  aspectRatio: (0, _propTypes.oneOf)(["1x1", "16x9", "2x3", "3x2", "4x3", "3x4"])
};

exports.default = GridList;