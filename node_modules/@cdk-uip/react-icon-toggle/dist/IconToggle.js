"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IconToggle = function (_React$Component) {
  _inherits(IconToggle, _React$Component);

  function IconToggle() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, IconToggle);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = IconToggle.__proto__ || Object.getPrototypeOf(IconToggle)).call.apply(_ref, [this].concat(args))), _this), _this.state = { on: _this.props.on }, _this.onClick = function (e) {
      _this.setState(function (prevState) {
        return { on: !prevState.on };
      }, function () {
        _this.props.onChange(_this.state.on);
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(IconToggle, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.on !== prevProps.on) {
        this.setState({ on: this.props.on });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          on = _props.on,
          primary = _props.primary,
          accent = _props.accent,
          iconOn = _props.iconOn,
          iconOff = _props.iconOff,
          className = _props.className,
          children = _props.children,
          disabled = _props.disabled,
          other = _objectWithoutProperties(_props, ["on", "primary", "accent", "iconOn", "iconOff", "className", "children", "disabled"]);

      return _react2.default.createElement(
        "span",
        _extends({
          className: (0, _classnames2.default)("mdc-icon-toggle", {
            "mdc-icon-toggle--primary": primary,
            "mdc-icon-toggle--accent": accent,
            "mdc-icon-toggle--disabled": disabled
          }, className),
          role: "button",
          tabIndex: disabled ? "-1" : "0",
          "aria-disabled": disabled ? "true" : "false",
          onClick: this.onClick
        }, other),
        _react2.default.createElement("i", {
          className: "cdkicon-" + (this.state.on ? iconOn : iconOff),
          "aria-hidden": "true"
        })
      );
    }
  }]);

  return IconToggle;
}(_react2.default.Component);

IconToggle.propTypes = {
  /** Current toggle state (on or off) */
  on: _propTypes2.default.bool,
  /** The icon to use when toggled on */
  iconOn: _propTypes2.default.string,
  /** The icon to use when toggled off */
  iconOff: _propTypes2.default.string,
  /** Called when the toggle state changes. Passed the new state. */
  onChange: _propTypes2.default.func,
  /** Use the primary colour */
  primary: _propTypes2.default.bool,
  /** Use the accent colour */
  accent: _propTypes2.default.bool,
  /** Disabled */
  disabled: _propTypes2.default.bool
};
IconToggle.defaultProps = {
  on: false,
  onChange: function onChange() {}
};
exports.default = IconToggle;