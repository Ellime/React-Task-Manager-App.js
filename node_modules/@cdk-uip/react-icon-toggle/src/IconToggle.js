import React from "react";
import PropTypes from "prop-types";
import classnames from "classnames";

export default class IconToggle extends React.Component {
  static propTypes = {
    /** Current toggle state (on or off) */
    on: PropTypes.bool,
    /** The icon to use when toggled on */
    iconOn: PropTypes.string,
    /** The icon to use when toggled off */
    iconOff: PropTypes.string,
    /** Called when the toggle state changes. Passed the new state. */
    onChange: PropTypes.func,
    /** Use the primary colour */
    primary: PropTypes.bool,
    /** Use the accent colour */
    accent: PropTypes.bool,
    /** Disabled */
    disabled: PropTypes.bool
  };

  static defaultProps = {
    on: false,
    onChange: () => {}
  };

  state = { on: this.props.on };

  componentDidUpdate(prevProps) {
    if (this.props.on !== prevProps.on) {
      this.setState({ on: this.props.on });
    }
  }

  onClick = e => {
    this.setState(
      prevState => ({ on: !prevState.on }),
      () => {
        this.props.onChange(this.state.on);
      }
    );
  };

  render() {
    const {
      on,
      primary,
      accent,
      iconOn,
      iconOff,
      className,
      children,
      disabled,
      ...other
    } = this.props;

    return (
      <span
        className={classnames(
          "mdc-icon-toggle",
          {
            "mdc-icon-toggle--primary": primary,
            "mdc-icon-toggle--accent": accent,
            "mdc-icon-toggle--disabled": disabled
          },
          className
        )}
        role="button"
        tabIndex={disabled ? "-1" : "0"}
        aria-disabled={disabled ? "true" : "false"}
        onClick={this.onClick}
        {...other}
      >
        <i
          className={`cdkicon-${this.state.on ? iconOn : iconOff}`}
          aria-hidden="true"
        />
      </span>
    );
  }
}
