"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames2 = require("classnames");

var _classnames3 = _interopRequireDefault(_classnames2);

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Every cell should be in a `LayoutGridCell`. Behavior for grids containing direct
 * children without the cell wrapper is undefined.
 */
var LayoutGridCell = function LayoutGridCell(_ref) {
  var _classnames;

  var span = _ref.span,
      spanDesktop = _ref.spanDesktop,
      spanTablet = _ref.spanTablet,
      spanPhone = _ref.spanPhone,
      order = _ref.order,
      align = _ref.align,
      className = _ref.className,
      children = _ref.children,
      other = _objectWithoutProperties(_ref, ["span", "spanDesktop", "spanTablet", "spanPhone", "order", "align", "className", "children"]);

  return _react2.default.createElement(
    "div",
    _extends({
      className: (0, _classnames3.default)("mdc-layout-grid__cell", (_classnames = {}, _defineProperty(_classnames, "mdc-layout-grid__cell--span-" + span, span), _defineProperty(_classnames, "mdc-layout-grid__cell--span-" + spanDesktop + "-desktop", spanDesktop), _defineProperty(_classnames, "mdc-layout-grid__cell--span-" + spanTablet + "-tablet", spanTablet), _defineProperty(_classnames, "mdc-layout-grid__cell--span-" + spanPhone + "-phone", spanPhone), _defineProperty(_classnames, "mdc-layout-grid__cell--order-" + order, order), _defineProperty(_classnames, "mdc-layout-grid__cell--align-" + align, align), _classnames), className)
    }, other),
    children
  );
};

LayoutGridCell.propTypes = {
  /** You can set the cells span by applying the span prop which is an integer between 1 and 12. */
  span: _propTypes.number,
  /** Cell span in desktop size */
  spanDesktop: _propTypes.number,
  /** Cell span in tablet size. */
  spanTablet: _propTypes.number,
  /** Cell span in phone size. */
  spanPhone: _propTypes.number,
  /** By default, items are positioned in the source order. However, you can reorder them by using the order prop which is an integer between 1 and 12. */
  order: _propTypes.number,
  /** Items are defined to stretch, by default, taking up the height of their corresponding row. You can switch to a different behavior by using one of the alignment values. */
  align: (0, _propTypes.oneOf)(["top", "middle", "bottom"])
};

exports.default = LayoutGridCell;