import React from "react";
import classnames from "classnames";
import { bool, oneOf } from "prop-types";

/**
 * A grid is a container that consists of a group of cells. Grid can define its own max-width or designate its columns to be a certain width. Cells get positioned in sequence according to a predefined number of columns.
 *
 * The grid has 12 columns in desktop mode (>= 840px), 8 columns in tablet mode (>= 480px), and 4 columns in phone mode (< 480px). Cells specify how many columns to span (the default is 4). Cells are placed side by side until there is no more room, then the next cell is placed at the beginning of the next row.
 */
const LayoutGrid = ({
  nested,
  align,
  fixedColumnWidth,
  className,
  children,
  ...other
}) => {
  if (nested) {
    return (
      <div className={classnames("mdc-layout-grid__inner", className)}>
        {children}
      </div>
    );
  }
  return (
    <div
      className={classnames(
        "mdc-layout-grid",
        {
          [`mdc-layout-grid--align-${align}`]: align,
          [`mdc-layout-grid--fixed-column-width`]: fixedColumnWidth
        },
        className
      )}
      {...other}
    >
      <div className="mdc-layout-grid__inner">{children}</div>
    </div>
  );
};

LayoutGrid.propTypes = {
  /** The nested layout grid behaves exactly like when they are not nested, but margins are not re-introduced since they are living within another cell. */
  nested: bool,
  /** The grid is by default center aligned. User can add `left` or `right` modifier prop to change this behavior. Note, these modifiers will have no effect when the grid already fills its container. */
  align: oneOf(["left", "right"]),
  /** Defines the container by width designated column width (set by --mdc-layout-grid-column-width-* variables). */
  fixedColumnWidth: bool
};

export default LayoutGrid;
