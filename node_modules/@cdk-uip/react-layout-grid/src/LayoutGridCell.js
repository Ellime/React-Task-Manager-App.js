import React from "react";
import classnames from "classnames";
import { number, oneOf } from "prop-types";

/**
 * Every cell should be in a `LayoutGridCell`. Behavior for grids containing direct
 * children without the cell wrapper is undefined.
 */
const LayoutGridCell = ({
  span,
  spanDesktop,
  spanTablet,
  spanPhone,
  order,
  align,
  className,
  children,
  ...other
}) => {
  return (
    <div
      className={classnames(
        "mdc-layout-grid__cell",
        {
          [`mdc-layout-grid__cell--span-${span}`]: span,
          [`mdc-layout-grid__cell--span-${spanDesktop}-desktop`]: spanDesktop,
          [`mdc-layout-grid__cell--span-${spanTablet}-tablet`]: spanTablet,
          [`mdc-layout-grid__cell--span-${spanPhone}-phone`]: spanPhone,
          [`mdc-layout-grid__cell--order-${order}`]: order,
          [`mdc-layout-grid__cell--align-${align}`]: align
        },
        className
      )}
      {...other}
    >
      {children}
    </div>
  );
};

LayoutGridCell.propTypes = {
  /** You can set the cells span by applying the span prop which is an integer between 1 and 12. */
  span: number,
  /** Cell span in desktop size */
  spanDesktop: number,
  /** Cell span in tablet size. */
  spanTablet: number,
  /** Cell span in phone size. */
  spanPhone: number,
  /** By default, items are positioned in the source order. However, you can reorder them by using the order prop which is an integer between 1 and 12. */
  order: number,
  /** Items are defined to stretch, by default, taking up the height of their corresponding row. You can switch to a different behavior by using one of the alignment values. */
  align: oneOf(["top", "middle", "bottom"])
};

export default LayoutGridCell;
