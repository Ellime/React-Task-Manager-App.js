"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * List items. Can be styled like a button (interactive) with a ripple
 * effect in supported browsers.
 */
var ListItem = function ListItem(_ref) {
  var button = _ref.button,
      selected = _ref.selected,
      activated = _ref.activated,
      className = _ref.className,
      children = _ref.children,
      other = _objectWithoutProperties(_ref, ["button", "selected", "activated", "className", "children"]);

  var T = button ? "a" : "li";
  return _react2.default.createElement(
    T,
    _extends({
      className: (0, _classnames2.default)("mdc-list-item", {
        "mdc-list-item--selected": selected,
        "mdc-list-item--activated": activated
      }, className)
    }, other),
    children
  );
};

ListItem.propTypes = {
  /**
   * True to make the item clickable.
   */
  button: _propTypes.bool,
  /**
   * Styles the item in a selected state.
   *
   * Multiple items in a list can be selected at the same time.
   */
  selected: _propTypes.bool,
  /**
   * Styles the item in an activated state.
   *
   * Only one item in a list should be activated at a time.
   */
  activated: _propTypes.bool
};

exports.default = ListItem;