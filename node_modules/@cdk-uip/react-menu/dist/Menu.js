"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _mdc = require("@material/menu/dist/mdc.menu");

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Menu = function (_React$Component) {
  _inherits(Menu, _React$Component);

  function Menu() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Menu);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Menu.__proto__ || Object.getPrototypeOf(Menu)).call.apply(_ref, [this].concat(args))), _this), _this.onSelected = function (e) {
      _this.props.onSelected && _this.props.onSelected(e.detail.index);
    }, _this.onCancel = function () {
      _this.props.onCancel && _this.props.onCancel();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Menu, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.menu) {
        this.MDCComponent = new _mdc.MDCMenu(this.menu);
        this.MDCComponent.listen("MDCMenu:selected", this.onSelected);
        this.MDCComponent.listen("MDCMenu:cancel", this.onCancel);
        this.MDCComponent.open = this.props.open;
        this.setAnchorCorner(this.props.anchorCorner);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.MDCComponent) {
        this.MDCComponent.unlisten("MDCMenu:selected", this.onSelected);
        this.MDCComponent.unlisten("MDCMenu:cancel", this.onCancel);
        this.MDCComponent.destroy();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.MDCComponent) {
        if (prevProps.open !== this.props.open) {
          this.MDCComponent.open = this.props.open;
        }
        if (prevProps.anchorCorner !== this.props.anchorCorner) {
          this.setAnchorCorner(this.props.anchorCorner);
        }
      }
    }
  }, {
    key: "setAnchorCorner",
    value: function setAnchorCorner(corner) {
      switch (corner) {
        default:
        case "top-start":
          this.MDCComponent.setAnchorCorner(_mdc.MDCMenuFoundation.Corner.TOP_START);
          break;
        case "top-end":
          this.MDCComponent.setAnchorCorner(_mdc.MDCMenuFoundation.Corner.TOP_END);
          break;
        case "bottom-start":
          this.MDCComponent.setAnchorCorner(_mdc.MDCMenuFoundation.Corner.BOTTOM_START);
          break;
        case "bottom-end":
          this.MDCComponent.setAnchorCorner(_mdc.MDCMenuFoundation.Corner.BOTTOM_END);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          open = _props.open,
          children = _props.children,
          onCancel = _props.onCancel,
          onSelected = _props.onSelected,
          anchorCorner = _props.anchorCorner,
          icons = _props.icons,
          other = _objectWithoutProperties(_props, ["className", "open", "children", "onCancel", "onSelected", "anchorCorner", "icons"]);

      return _react2.default.createElement(
        "div",
        _extends({
          ref: function ref(menu) {
            _this2.menu = menu;
          },
          className: (0, _classnames2.default)("mdc-menu", { "mdc-menu-icons": icons }, className),
          tabIndex: "-1"
        }, other),
        _react2.default.createElement(
          "ul",
          {
            className: (0, _classnames2.default)("mdc-list", "mdc-menu__items"),
            role: "menu",
            "aria-hidden": "true"
          },
          children
        )
      );
    }
  }]);

  return Menu;
}(_react2.default.Component);

Menu.propTypes = {
  /** Open or close the menu */
  open: _propTypes.bool,
  /** Called when an item is selected. Passed the item index. */
  onSelected: _propTypes.func,
  /** Called when the menu is closed. */
  onCancel: _propTypes.func,
  /** Specifies the anchor corner to which the start of the menu should align */
  anchorCorner: (0, _propTypes.oneOf)(["top-start", "top-end", "bottom-start", "bottom-end"]),
  /** Specifies that some items have icons, ensuring text padding is correct */
  icons: _propTypes.bool
};
Menu.defaultProps = {
  anchorCorner: "top-start"
};
exports.default = Menu;