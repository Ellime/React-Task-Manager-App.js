import React from "react";
import classnames from "classnames";
import { MDCMenu, MDCMenuFoundation } from "@material/menu/dist/mdc.menu";
import { bool, func, oneOf } from "prop-types";

export default class Menu extends React.Component {
  static propTypes = {
    /** Open or close the menu */
    open: bool,
    /** Called when an item is selected. Passed the item index. */
    onSelected: func,
    /** Called when the menu is closed. */
    onCancel: func,
    /** Specifies the anchor corner to which the start of the menu should align */
    anchorCorner: oneOf(["top-start", "top-end", "bottom-start", "bottom-end"]),
    /** Specifies that some items have icons, ensuring text padding is correct */
    icons: bool
  };

  static defaultProps = {
    anchorCorner: "top-start"
  };

  componentDidMount() {
    if (this.menu) {
      this.MDCComponent = new MDCMenu(this.menu);
      this.MDCComponent.listen("MDCMenu:selected", this.onSelected);
      this.MDCComponent.listen("MDCMenu:cancel", this.onCancel);
      this.MDCComponent.open = this.props.open;
      this.setAnchorCorner(this.props.anchorCorner);
    }
  }

  componentWillUnmount() {
    if (this.MDCComponent) {
      this.MDCComponent.unlisten("MDCMenu:selected", this.onSelected);
      this.MDCComponent.unlisten("MDCMenu:cancel", this.onCancel);
      this.MDCComponent.destroy();
    }
  }

  componentDidUpdate(prevProps) {
    if (this.MDCComponent) {
      if (prevProps.open !== this.props.open) {
        this.MDCComponent.open = this.props.open;
      }
      if (prevProps.anchorCorner !== this.props.anchorCorner) {
        this.setAnchorCorner(this.props.anchorCorner);
      }
    }
  }

  setAnchorCorner(corner) {
    switch (corner) {
      default:
      case "top-start":
        this.MDCComponent.setAnchorCorner(MDCMenuFoundation.Corner.TOP_START);
        break;
      case "top-end":
        this.MDCComponent.setAnchorCorner(MDCMenuFoundation.Corner.TOP_END);
        break;
      case "bottom-start":
        this.MDCComponent.setAnchorCorner(
          MDCMenuFoundation.Corner.BOTTOM_START
        );
        break;
      case "bottom-end":
        this.MDCComponent.setAnchorCorner(MDCMenuFoundation.Corner.BOTTOM_END);
    }
  }

  onSelected = e => {
    this.props.onSelected && this.props.onSelected(e.detail.index);
  };

  onCancel = () => {
    this.props.onCancel && this.props.onCancel();
  };

  render() {
    const {
      className,
      open,
      children,
      onCancel,
      onSelected,
      anchorCorner,
      icons,
      ...other
    } = this.props;
    return (
      <div
        ref={menu => {
          this.menu = menu;
        }}
        className={classnames(
          "mdc-menu",
          { "mdc-menu-icons": icons },
          className
        )}
        tabIndex="-1"
        {...other}
      >
        <ul
          className={classnames("mdc-list", "mdc-menu__items")}
          role="menu"
          aria-hidden="true"
        >
          {children}
        </ul>
      </div>
    );
  }
}
