import React from "react";
import {
  MobileStepper,
  MobileStepperHeader,
  MobileStepperHeaderText,
  MobileStepperBody,
  MobileStepperFooter,
  MobileStepperBackButton,
  MobileStepperNextButton,
  MobileStepperDots,
  MobileStepperProgress
} from ".";
import { storiesOf } from "@storybook/react";
import { withKnobs, select, boolean } from "@storybook/addon-knobs";
import "./demo.css";

class Controlled extends React.Component {
  state = { steps: 5, activeStep: 0 };

  render() {
    const { showHeader, stepper, fixed } = this.props;
    return (
      <div className="demo-mobile-stepper">
        <MobileStepper fixed={fixed}>
          {showHeader && (
            <MobileStepperHeader>
              <MobileStepperHeaderText>
                Step {this.state.activeStep + 1} of {this.state.steps}
              </MobileStepperHeaderText>
            </MobileStepperHeader>
          )}
          <MobileStepperBody>Body</MobileStepperBody>
          <MobileStepperFooter>
            <MobileStepperBackButton
              disabled={this.state.activeStep === 0}
              onClick={() =>
                this.setState(prevState => ({
                  activeStep: prevState.activeStep - 1
                }))
              }
            >
              Back
            </MobileStepperBackButton>

            {stepper && React.cloneElement(stepper, { ...this.state })}

            <MobileStepperNextButton
              disabled={this.state.activeStep === this.state.steps - 1}
              onClick={() =>
                this.setState(prevState => ({
                  activeStep: prevState.activeStep + 1
                }))
              }
            >
              Next
            </MobileStepperNextButton>
          </MobileStepperFooter>
        </MobileStepper>
      </div>
    );
  }
}

storiesOf("mobile-stepper", module)
  .addDecorator(withKnobs)
  .add("props", () => {
    const type = select("Type", ["Text", "Dots", "Progress"], "Text");
    return (
      <Controlled
        showHeader={boolean("Show header", true)}
        stepper={
          (type === "Dots" && <MobileStepperDots />) ||
          (type === "Progress" && <MobileStepperProgress />)
        }
        fixed={boolean("Fixed", false)}
      />
    );
  });
