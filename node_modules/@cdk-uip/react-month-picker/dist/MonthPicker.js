"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _MonthPickerDialog = require("./MonthPickerDialog");

var _MonthPickerDialog2 = _interopRequireDefault(_MonthPickerDialog);

var _moment = require("moment");

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * High-level month and year picker.
 *
 * This component works like a `<Dialog>` giving you control
 * over when to show/hide the dialog but it manages the month
 * and year selection for you. Supply an `onOK` prop that is
 * called with the selected month and year when the dialog is
 * dismissed.
 *
 * The month names are fetched using `moment`: you need to ensure
 * that the correct locale is used by calling `moment.locale` prior
 * to rendering this component.
 *
 * Note that you are responsible for localising other content (select
 * labels, button labels, etc.) yourself.
 *
 * Alternatively you can consume the `MonthPickerDialog` directly
 * and manage the selected month/year state yourself.
 */
var MonthPicker = function (_Component) {
  _inherits(MonthPicker, _Component);

  function MonthPicker() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, MonthPicker);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MonthPicker.__proto__ || Object.getPrototypeOf(MonthPicker)).call.apply(_ref, [this].concat(args))), _this), _this.state = { month: _this.props.month, year: _this.props.year }, _this.handleMonthChange = function (e) {
      _this.setState({ month: parseInt(e.target.value, 10) });
    }, _this.handleYearChange = function (e) {
      _this.setState({ year: parseInt(e.target.value, 10) });
    }, _this.handleOK = function (e) {
      _this.props.onOK(_this.state.month, _this.state.year);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(MonthPicker, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      // When the dialog is closed reset the state in case
      // the component never gets unmounted
      if (prevProps.open && !this.props.open) {
        this.setState({ month: this.props.month, year: this.props.year });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _state = this.state,
          month = _state.month,
          year = _state.year;

      return _react2.default.createElement(_MonthPickerDialog2.default, _extends({}, this.props, {
        months: _moment2.default.months(),
        month: month,
        onChangeMonth: this.handleMonthChange,
        year: year,
        onChangeYear: this.handleYearChange,
        okDisabled: month === undefined || year === undefined,
        onOK: this.handleOK
      }));
    }
  }]);

  return MonthPicker;
}(_react.Component);

MonthPicker.propTypes = {
  /** Open or close the dialog */
  open: _propTypes2.default.bool,
  /** Called when the dialog is cancelled */
  onCancel: _propTypes2.default.func,
  /** Called when the dialog is accepted, passing the selected month (indexed from 0) and year */
  onOK: _propTypes2.default.func,
  /** The dialog title */
  title: _propTypes2.default.node,
  /** The currently selected month */
  month: _propTypes2.default.number,
  /** The label to use for the month drop-down */
  monthLabel: _propTypes2.default.node,
  /** The currently selected year */
  year: _propTypes2.default.number,
  /** The list of years to display */
  years: _propTypes2.default.arrayOf(_propTypes2.default.number).isRequired,
  /** The label to use for the year drop-down */
  yearLabel: _propTypes2.default.node,
  /** The label to use for the Cancel button */
  cancelLabel: _propTypes2.default.node,
  /** The label to use for the OK button */
  okLabel: _propTypes2.default.node
};
MonthPicker.defaultProps = {
  monthLabel: "Month",
  yearLabel: "Year",
  cancelLabel: "Cancel",
  okLabel: "OK"
};
exports.default = MonthPicker;