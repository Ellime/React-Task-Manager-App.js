"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDialog = require("@cdk-uip/react-dialog");

var _MonthPickerSelect = require("./MonthPickerSelect");

var _MonthPickerSelect2 = _interopRequireDefault(_MonthPickerSelect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Controlled month/year picker.
 *
 * If you use this component directly then you are responsible
 * for managing the state of the currently selected month/year.
 *
 * For a higher-level wrapper you can use `<MonthPicker>` instead.
 */
var MonthPickerDialog = function MonthPickerDialog(_ref) {
  var open = _ref.open,
      onCancel = _ref.onCancel,
      onOK = _ref.onOK,
      className = _ref.className,
      title = _ref.title,
      monthLabel = _ref.monthLabel,
      month = _ref.month,
      onChangeMonth = _ref.onChangeMonth,
      months = _ref.months,
      yearLabel = _ref.yearLabel,
      year = _ref.year,
      onChangeYear = _ref.onChangeYear,
      years = _ref.years,
      okLabel = _ref.okLabel,
      cancelLabel = _ref.cancelLabel,
      okDisabled = _ref.okDisabled;
  return _react2.default.createElement(
    _reactDialog.Dialog,
    {
      open: open,
      onCancel: onCancel,
      className: (0, _classnames2.default)("cdk-month-picker", className)
    },
    _react2.default.createElement(
      _reactDialog.DialogHeader,
      null,
      title
    ),
    _react2.default.createElement(
      _reactDialog.DialogBody,
      null,
      _react2.default.createElement(
        "div",
        { className: "cdk-month-picker--container" },
        _react2.default.createElement(_MonthPickerSelect2.default, {
          className: "cdk-month-picker--month",
          label: monthLabel,
          value: month,
          onChange: onChangeMonth,
          options: months.map(function (label, value) {
            return { label: label, value: value };
          })
        }),
        _react2.default.createElement(_MonthPickerSelect2.default, {
          className: "cdk-month-picker--year",
          label: yearLabel,
          value: year,
          onChange: onChangeYear,
          options: years.map(function (label) {
            return { label: label, value: label };
          })
        })
      )
    ),
    _react2.default.createElement(
      _reactDialog.DialogFooter,
      null,
      _react2.default.createElement(
        _reactDialog.DialogFooterButton,
        { onClick: onCancel },
        cancelLabel
      ),
      _react2.default.createElement(
        _reactDialog.DialogFooterButton,
        { onClick: onOK, disabled: okDisabled },
        okLabel
      )
    )
  );
};

MonthPickerDialog.propTypes = {
  open: _propTypes2.default.bool,
  onCancel: _propTypes2.default.func,
  onOK: _propTypes2.default.func,
  title: _propTypes2.default.node,
  month: _propTypes2.default.number,
  onChangeMonth: _propTypes2.default.func,
  months: _propTypes2.default.arrayOf(_propTypes2.default.node).isRequired,
  monthLabel: _propTypes2.default.node,
  year: _propTypes2.default.number,
  onChangeYear: _propTypes2.default.func,
  years: _propTypes2.default.arrayOf(_propTypes2.default.number).isRequired,
  yearLabel: _propTypes2.default.node,
  cancelLabel: _propTypes2.default.node,
  okLabel: _propTypes2.default.node,
  okDisabled: _propTypes2.default.bool
};

exports.default = MonthPickerDialog;