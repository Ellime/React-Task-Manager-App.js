import React, { Component } from "react";
import PropTypes from "prop-types";
import MonthPickerDialog from "./MonthPickerDialog";
import moment from "moment";

/**
 * High-level month and year picker.
 *
 * This component works like a `<Dialog>` giving you control
 * over when to show/hide the dialog but it manages the month
 * and year selection for you. Supply an `onOK` prop that is
 * called with the selected month and year when the dialog is
 * dismissed.
 *
 * The month names are fetched using `moment`: you need to ensure
 * that the correct locale is used by calling `moment.locale` prior
 * to rendering this component.
 *
 * Note that you are responsible for localising other content (select
 * labels, button labels, etc.) yourself.
 *
 * Alternatively you can consume the `MonthPickerDialog` directly
 * and manage the selected month/year state yourself.
 */
class MonthPicker extends Component {
  static propTypes = {
    /** Open or close the dialog */
    open: PropTypes.bool,
    /** Called when the dialog is cancelled */
    onCancel: PropTypes.func,
    /** Called when the dialog is accepted, passing the selected month (indexed from 0) and year */
    onOK: PropTypes.func,
    /** The dialog title */
    title: PropTypes.node,
    /** The currently selected month */
    month: PropTypes.number,
    /** The label to use for the month drop-down */
    monthLabel: PropTypes.node,
    /** The currently selected year */
    year: PropTypes.number,
    /** The list of years to display */
    years: PropTypes.arrayOf(PropTypes.number).isRequired,
    /** The label to use for the year drop-down */
    yearLabel: PropTypes.node,
    /** The label to use for the Cancel button */
    cancelLabel: PropTypes.node,
    /** The label to use for the OK button */
    okLabel: PropTypes.node
  };

  static defaultProps = {
    monthLabel: "Month",
    yearLabel: "Year",
    cancelLabel: "Cancel",
    okLabel: "OK"
  };

  state = { month: this.props.month, year: this.props.year };

  componentDidUpdate(prevProps) {
    // When the dialog is closed reset the state in case
    // the component never gets unmounted
    if (prevProps.open && !this.props.open) {
      this.setState({ month: this.props.month, year: this.props.year });
    }
  }

  handleMonthChange = e => {
    this.setState({ month: parseInt(e.target.value, 10) });
  };

  handleYearChange = e => {
    this.setState({ year: parseInt(e.target.value, 10) });
  };

  handleOK = e => {
    this.props.onOK(this.state.month, this.state.year);
  };

  render() {
    const { month, year } = this.state;
    return (
      <MonthPickerDialog
        {...this.props}
        months={moment.months()}
        month={month}
        onChangeMonth={this.handleMonthChange}
        year={year}
        onChangeYear={this.handleYearChange}
        okDisabled={month === undefined || year === undefined}
        onOK={this.handleOK}
      />
    );
  }
}

export default MonthPicker;
