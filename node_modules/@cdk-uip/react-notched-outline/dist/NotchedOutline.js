"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The notched outline is a border around all sides of either a Text Field or Select component.
 * This is used for the Outlined variant of either a Text Field or Select.
 */
var NotchedOutline = function (_Component) {
  _inherits(NotchedOutline, _Component);

  function NotchedOutline() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, NotchedOutline);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = NotchedOutline.__proto__ || Object.getPrototypeOf(NotchedOutline)).call.apply(_ref, [this].concat(args))), _this), _this.state = { d: "" }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(NotchedOutline, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({ d: this.svgPath() });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.width !== prevProps.width) {
        this.setState({ d: this.svgPath() });
      }
    }
  }, {
    key: "getRadius",
    value: function getRadius() {
      var radiusStyleValue = window.getComputedStyle(this.idle).getPropertyValue("border-radius") || window.getComputedStyle(this.idle).getPropertyValue("border-top-left-radius");
      return parseFloat(radiusStyleValue || "0");
    }
  }, {
    key: "svgPath",
    value: function svgPath() {
      if (this.root && this.idle) {
        var radius = this.getRadius();
        var width = this.root.offsetWidth;
        var height = this.root.offsetHeight;
        var cornerWidth = radius + 1.2;
        var leadingStrokeLength = Math.abs(11 - cornerWidth);
        var paddedNotchWidth = this.props.width + 8;

        // The right, bottom, and left sides of the outline follow the same SVG path.
        var pathMiddle = "a" + radius + "," + radius + " 0 0 1 " + radius + "," + radius + "v" + (height - 2 * cornerWidth) + "a" + radius + "," + radius + " 0 0 1 " + -radius + "," + radius + "h" + (-width + 2 * cornerWidth) + "a" + radius + "," + radius + " 0 0 1 " + -radius + "," + -radius + "v" + (-height + 2 * cornerWidth) + "a" + radius + "," + radius + " 0 0 1 " + radius + "," + -radius;

        var path = "M" + (cornerWidth + leadingStrokeLength + paddedNotchWidth) + "," + 1 + "h" + (width - 2 * cornerWidth - paddedNotchWidth - leadingStrokeLength) + pathMiddle + "h" + leadingStrokeLength;

        return path;
      }
      return "";
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        _react.Fragment,
        null,
        _react2.default.createElement(
          "div",
          {
            className: (0, _classnames2.default)("mdc-notched-outline", {
              "mdc-notched-outline--notched": this.props.open
            }),
            ref: function ref(_ref2) {
              _this2.root = _ref2;
            }
          },
          _react2.default.createElement(
            "svg",
            null,
            _react2.default.createElement("path", { className: "mdc-notched-outline__path", d: this.state.d })
          )
        ),
        _react2.default.createElement("div", {
          className: "mdc-notched-outline__idle",
          ref: function ref(_ref3) {
            _this2.idle = _ref3;
          }
        })
      );
    }
  }]);

  return NotchedOutline;
}(_react.Component);

NotchedOutline.propTypes = {
  /** Open or close the notch */
  open: _propTypes2.default.bool,
  /** The notch width */
  width: _propTypes2.default.number
};
exports.default = NotchedOutline;