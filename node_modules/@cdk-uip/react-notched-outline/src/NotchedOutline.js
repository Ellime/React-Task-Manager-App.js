import React, { Component, Fragment } from "react";
import classnames from "classnames";
import PropTypes from "prop-types";

/**
 * The notched outline is a border around all sides of either a Text Field or Select component.
 * This is used for the Outlined variant of either a Text Field or Select.
 */
export default class NotchedOutline extends Component {
  static propTypes = {
    /** Open or close the notch */
    open: PropTypes.bool,
    /** The notch width */
    width: PropTypes.number
  };

  state = { d: "" };

  componentDidMount() {
    this.setState({ d: this.svgPath() });
  }

  componentDidUpdate(prevProps) {
    if (this.props.width !== prevProps.width) {
      this.setState({ d: this.svgPath() });
    }
  }

  getRadius() {
    const radiusStyleValue =
      window.getComputedStyle(this.idle).getPropertyValue("border-radius") ||
      window
        .getComputedStyle(this.idle)
        .getPropertyValue("border-top-left-radius");
    return parseFloat(radiusStyleValue || "0");
  }

  svgPath() {
    if (this.root && this.idle) {
      const radius = this.getRadius();
      const width = this.root.offsetWidth;
      const height = this.root.offsetHeight;
      const cornerWidth = radius + 1.2;
      const leadingStrokeLength = Math.abs(11 - cornerWidth);
      const paddedNotchWidth = this.props.width + 8;

      // The right, bottom, and left sides of the outline follow the same SVG path.
      const pathMiddle =
        "a" +
        radius +
        "," +
        radius +
        " 0 0 1 " +
        radius +
        "," +
        radius +
        "v" +
        (height - 2 * cornerWidth) +
        "a" +
        radius +
        "," +
        radius +
        " 0 0 1 " +
        -radius +
        "," +
        radius +
        "h" +
        (-width + 2 * cornerWidth) +
        "a" +
        radius +
        "," +
        radius +
        " 0 0 1 " +
        -radius +
        "," +
        -radius +
        "v" +
        (-height + 2 * cornerWidth) +
        "a" +
        radius +
        "," +
        radius +
        " 0 0 1 " +
        radius +
        "," +
        -radius;

      const path =
        "M" +
        (cornerWidth + leadingStrokeLength + paddedNotchWidth) +
        "," +
        1 +
        "h" +
        (width - 2 * cornerWidth - paddedNotchWidth - leadingStrokeLength) +
        pathMiddle +
        "h" +
        leadingStrokeLength;

      return path;
    }
    return "";
  }

  render() {
    return (
      <Fragment>
        <div
          className={classnames("mdc-notched-outline", {
            "mdc-notched-outline--notched": this.props.open
          })}
          ref={ref => {
            this.root = ref;
          }}
        >
          <svg>
            <path className="mdc-notched-outline__path" d={this.state.d} />
          </svg>
        </div>
        <div
          className="mdc-notched-outline__idle"
          ref={ref => {
            this.idle = ref;
          }}
        />
      </Fragment>
    );
  }
}
