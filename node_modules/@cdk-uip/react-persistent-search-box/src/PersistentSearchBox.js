import React from "react";
import { TextField } from "@cdk-uip/react-text-field";
import { node, func, bool, number, array, string } from "prop-types";
import debounce from "lodash/debounce";
import classnames from "classnames";
import { Icon } from "@cdk-uip/react-icon";
import PersistentSearchResults from "./PersistentSearchResults";

/**
 * Search box component.
 */
export default class PersistentSearchBox extends React.Component {
  static propTypes = {
    /** The current search value */
    value: string,
    /** Called when the value changes */
    onChange: func,
    /** className for container div */
    className: string,
    /** placeholder inside the search field */
    label: node,
    /** help text under the search field */
    helpText: node,
    /** on search callback */
    onFetch: func.isRequired,
    /** disable the Search Field */
    disabled: bool,
    /** number of ms to delay the fetch call */
    delay: number,
    /** expose a ref to the constituent TextField */
    setInputRef: func,
    /** on clicking the clear button or emptying the search field */
    onClear: func,
    /** The most recent results to be displayed */
    results: array,
    /** Called when the back button is clicked */
    onBack: func,
    /** Called when a result is selected. Passed the text and index */
    onClick: func
  };

  static defaultProps = {
    className: "primary",
    delay: 700,
    onChange: () => {},
    onClear: () => {},
    onFetch: () => {},
    onBack: () => {},
    setInputRef: () => {},
    onClick: () => {},
    results: []
  };

  state = {
    hasFocus: false
  };

  doSearch = debounce(value => {
    this.props.onFetch(value);
  }, this.props.delay || 700);

  handleChange = e => {
    this.doSearch(e.target.value);
    this.props.onChange(e);
  };

  handleFocus = () => {
    this.setState({ hasFocus: true });
  };

  handleBlur = () => {
    this.setState({ hasFocus: false });
  };

  handleClear = () => {
    this.props.onClear();
    this.inputRef && this.inputRef.focus();
  };

  onInputRef = ref => {
    this.inputRef = ref;
    this.props.setInputRef(ref);
  };

  render() {
    const {
      value,
      onChange,
      className,
      label,
      disabled,
      onFetch,
      onClear,
      results,
      setInputRef,
      onBack,
      onClick,
      ...other
    } = this.props;
    const haveResults = results.length > 0;
    return (
      <div
        className="cdk-persistent-search__container"
        onFocus={this.handleFocus}
        onBlur={this.handleBlur}
      >
        <div className="cdk-persistent-search__search-bar">
          <div className="cdk-persistent-search__back">
            <Icon onClick={haveResults ? onBack : null}>
              {haveResults ? "arrow_back" : "search"}
            </Icon>
          </div>
          <TextField
            className={classnames("persistent-search-box", className)}
            value={value}
            placeholder={label}
            box
            onChange={this.handleChange}
            disabled={disabled}
            boxFocus={false}
            inputRef={this.onInputRef}
            {...other}
          />
          {value && (
            <div className="cdk-persistent-search__cancel">
              <Icon
                className="cdk-persistent-search__cancel-icon"
                tabIndex="0"
                onClick={this.handleClear}
              >
                cancel
              </Icon>
            </div>
          )}
        </div>

        {haveResults &&
          this.state.hasFocus && (
            <div className="cdk-persistent-search__result-container">
              <PersistentSearchResults results={results} onClick={onClick} />
            </div>
          )}
      </div>
    );
  }
}
