import React from "react";
import ReactDOM from "react-dom";
import { PersistentSearchBox } from ".";
import renderer from "react-test-renderer";
import TestUtils from "react-dom/test-utils";
import debounce from "lodash/debounce";

jest.mock("lodash/debounce");

debounce.mockImplementation(callback => callback);

jest.useFakeTimers();

it("renders", () => {
  expect(
    renderer.create(<PersistentSearchBox label="Search" />)
  ).toMatchSnapshot();
});

it("handles onFetch", () => {
  const handleFetch = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <PersistentSearchBox onFetch={handleFetch} />
  );
  const input = TestUtils.findRenderedDOMComponentWithTag(component, "input");
  TestUtils.Simulate.change(input, { target: { value: "test" } });
  expect(handleFetch).toHaveBeenCalledWith("test");
});

it("handles onChange", () => {
  const handleChange = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <PersistentSearchBox onChange={handleChange} />
  );
  const input = TestUtils.findRenderedDOMComponentWithTag(component, "input");
  TestUtils.Simulate.change(input, { target: { value: "test" } });
  expect(handleChange).toHaveBeenCalled();
});

it("handles onClear", () => {
  const handleClear = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <PersistentSearchBox value="test" onClear={handleClear} />
  );
  const icon = TestUtils.findRenderedDOMComponentWithClass(
    component,
    "cdk-persistent-search__cancel-icon"
  );
  TestUtils.Simulate.click(icon);
  expect(handleClear).toHaveBeenCalled();
  // The input should now have focus
  const input = TestUtils.findRenderedDOMComponentWithTag(component, "input");
  expect(document.activeElement).toEqual(input);
});

it("handles onBack", () => {
  const handleBack = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <PersistentSearchBox
      value="test"
      onBack={handleBack}
      results={["Result 1", "Result 2"]}
    />
  );
  const icon = TestUtils.scryRenderedDOMComponentsWithTag(component, "i")[0];
  TestUtils.Simulate.click(icon);
  expect(handleBack).toHaveBeenCalled();
});

it("renders search results", () => {
  const component = TestUtils.renderIntoDocument(
    <PersistentSearchBox value="test" results={["Result 1", "Result 2"]} />
  );
  const container = TestUtils.findRenderedDOMComponentWithClass(
    component,
    "cdk-persistent-search__container"
  );
  TestUtils.Simulate.focus(container);
  const results = TestUtils.findRenderedDOMComponentWithClass(
    component,
    "cdk-persistent-search__result-container"
  );
  expect(results).toBeDefined();
});
