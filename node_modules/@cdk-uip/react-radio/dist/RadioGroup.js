"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactFormField = require("@cdk-uip/react-form-field");

var _Radio = require("./Radio");

var _Radio2 = _interopRequireDefault(_Radio);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Used to group `<Radio>` components together.
 */
var RadioGroup = function (_React$Component) {
  _inherits(RadioGroup, _React$Component);

  function RadioGroup() {
    _classCallCheck(this, RadioGroup);

    return _possibleConstructorReturn(this, (RadioGroup.__proto__ || Object.getPrototypeOf(RadioGroup)).apply(this, arguments));
  }

  _createClass(RadioGroup, [{
    key: "render",
    value: function render() {
      var _props = this.props,
          name = _props.name,
          value = _props.value,
          disabled = _props.disabled,
          onChange = _props.onChange,
          fullWidth = _props.fullWidth,
          children = _props.children,
          rest = _objectWithoutProperties(_props, ["name", "value", "disabled", "onChange", "fullWidth", "children"]);

      return _react2.default.createElement(
        "div",
        rest,
        _react2.default.Children.map(children, function (child, index) {
          var _child$props = child.props,
              children = _child$props.children,
              props = _objectWithoutProperties(_child$props, ["children"]);

          return _react2.default.createElement(
            _reactFormField.FormField,
            {
              id: name + "-" + index,
              style: { width: fullWidth ? "100%" : undefined }
            },
            _react2.default.createElement(_Radio2.default, _extends({
              disabled: disabled
            }, props, {
              value: child.props.value,
              checked: child.props.value === value,
              name: name,
              onChange: onChange
            })),
            _react2.default.createElement(
              "label",
              null,
              children
            )
          );
        })
      );
    }
  }]);

  return RadioGroup;
}(_react2.default.Component);

RadioGroup.propTypes = {
  /** The current value */
  value: _propTypes2.default.any,
  /** The group name */
  name: _propTypes2.default.string,
  /** Called when a new value is selected */
  onChange: _propTypes2.default.func,
  /** Use 100% width for each button */
  fullWidth: _propTypes2.default.bool,
  /** Disable each button in group */
  disabled: _propTypes2.default.bool
};
RadioGroup.defaultProps = {
  fullWidth: true,
  disabled: false
};
exports.default = RadioGroup;