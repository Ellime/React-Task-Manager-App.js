"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactTextField = require("@cdk-uip/react-text-field");

var _propTypes = require("prop-types");

var _debounce = require("lodash/debounce");

var _debounce2 = _interopRequireDefault(_debounce);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Search box component.
 *
 * You can use this as either a controlled or uncontrolled component. To use as
 * a controlled component, supply `value` and `onChange` props.
 */
var SearchBox = function (_React$Component) {
  _inherits(SearchBox, _React$Component);

  function SearchBox() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, SearchBox);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SearchBox.__proto__ || Object.getPrototypeOf(SearchBox)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: ""
    }, _this.doSearch = (0, _debounce2.default)(function (value) {
      if (value) {
        _this.props.onFetch(value);
      }
    }, _this.props.delay || 700), _this.handleSetInputRef = function (inputRef) {
      var setInputRef = _this.props.setInputRef;

      if (setInputRef) {
        setInputRef(inputRef);
      }
    }, _this.handleChange = function (e) {
      var value = e.target.value;
      _this.setState({ value: value });
      _this.doSearch(value);
      _this.props.onChange && _this.props.onChange(e);
    }, _this.handleClear = function () {
      return _this.setState({ value: "" });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SearchBox, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _this2 = this;

      var onClear = this.props.onClear;

      if (onClear && prevState.value && !this.state.value) {
        onClear();
      }

      var value = this.props.value;

      if (typeof value !== "undefined" && value !== this.state.value) {
        this.setState({ value: value }, function () {
          _this2.doSearch(value);
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          className = _props.className,
          label = _props.label,
          helpText = _props.helpText,
          disabled = _props.disabled,
          setInputRef = _props.setInputRef,
          onFetch = _props.onFetch,
          onClear = _props.onClear,
          onChange = _props.onChange,
          value = _props.value,
          other = _objectWithoutProperties(_props, ["className", "label", "helpText", "disabled", "setInputRef", "onFetch", "onClear", "onChange", "value"]);

      return _react2.default.createElement(_reactTextField.TextField, _extends({
        className: (0, _classnames2.default)("search-box", className),
        ref: this.handleSetInputRef,
        value: this.state.value,
        placeholder: label,
        helperText: _react2.default.createElement(
          _reactTextField.TextFieldHelperText,
          null,
          helpText
        ),
        box: true,
        leadingIcon: _react2.default.createElement(
          _reactTextField.TextFieldIcon,
          null,
          "search"
        ),
        trailingIcon: _react2.default.createElement(
          _reactTextField.TextFieldIcon,
          { onClick: this.handleClear },
          "clear"
        ),
        onChange: this.handleChange,
        disabled: disabled,
        boxFocus: false
      }, other));
    }
  }]);

  return SearchBox;
}(_react2.default.Component);

SearchBox.propTypes = {
  /** className for container div */
  className: _propTypes.node,
  /** placeholder inside the search field */
  label: _propTypes.node,
  /** help text under the search field */
  helpText: _propTypes.node,
  /** on search callback */
  onFetch: _propTypes.func.isRequired,
  /** disable the Search Field */
  disabled: _propTypes.bool,
  /** number of ms to delay the fetch call */
  delay: _propTypes.number,
  /** expose a ref to the constituent TextField */
  setInputRef: _propTypes.func,
  /** on clicking the clear button or emptying the search field */
  onClear: _propTypes.func
};
SearchBox.defaultProps = {
  delay: 700,
  onFetch: function onFetch() {}
};
exports.default = SearchBox;