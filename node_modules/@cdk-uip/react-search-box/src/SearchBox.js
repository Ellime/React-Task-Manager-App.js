import React from "react";
import {
  TextField,
  TextFieldHelperText,
  TextFieldIcon
} from "@cdk-uip/react-text-field";
import { node, func, bool, number } from "prop-types";
import debounce from "lodash/debounce";
import classnames from "classnames";

/**
 * Search box component.
 *
 * You can use this as either a controlled or uncontrolled component. To use as
 * a controlled component, supply `value` and `onChange` props.
 */
export default class SearchBox extends React.Component {
  static propTypes = {
    /** className for container div */
    className: node,
    /** placeholder inside the search field */
    label: node,
    /** help text under the search field */
    helpText: node,
    /** on search callback */
    onFetch: func.isRequired,
    /** disable the Search Field */
    disabled: bool,
    /** number of ms to delay the fetch call */
    delay: number,
    /** expose a ref to the constituent TextField */
    setInputRef: func,
    /** on clicking the clear button or emptying the search field */
    onClear: func
  };

  static defaultProps = {
    delay: 700,
    onFetch: () => {}
  };

  state = {
    value: ""
  };

  doSearch = debounce(value => {
    if (value) {
      this.props.onFetch(value);
    }
  }, this.props.delay || 700);

  handleSetInputRef = inputRef => {
    const { setInputRef } = this.props;
    if (setInputRef) {
      setInputRef(inputRef);
    }
  };

  handleChange = e => {
    const value = e.target.value;
    this.setState({ value });
    this.doSearch(value);
    this.props.onChange && this.props.onChange(e);
  };

  handleClear = () => this.setState({ value: "" });

  componentDidUpdate(prevProps, prevState) {
    const { onClear } = this.props;
    if (onClear && prevState.value && !this.state.value) {
      onClear();
    }

    const { value } = this.props;
    if (typeof value !== "undefined" && value !== this.state.value) {
      this.setState({ value }, () => {
        this.doSearch(value);
      });
    }
  }

  render() {
    const {
      className,
      label,
      helpText,
      disabled,
      setInputRef,
      onFetch,
      onClear,
      onChange,
      value,
      ...other
    } = this.props;
    return (
      <TextField
        className={classnames("search-box", className)}
        ref={this.handleSetInputRef}
        value={this.state.value}
        placeholder={label}
        helperText={<TextFieldHelperText>{helpText}</TextFieldHelperText>}
        box
        leadingIcon={<TextFieldIcon>search</TextFieldIcon>}
        trailingIcon={
          <TextFieldIcon onClick={this.handleClear}>clear</TextFieldIcon>
        }
        onChange={this.handleChange}
        disabled={disabled}
        boxFocus={false}
        {...other}
      />
    );
  }
}
