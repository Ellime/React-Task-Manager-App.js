import React from "react";
import ReactDOM from "react-dom";
import { SearchBox } from ".";
import renderer from "react-test-renderer";
import TestUtils from "react-dom/test-utils";

import debounce from "lodash/debounce";

jest.mock("lodash/debounce");

debounce.mockImplementation(callback => callback);

jest.useFakeTimers();

it("renders", () => {
  expect(renderer.create(<SearchBox label="Search" />)).toMatchSnapshot();
});

it("handles onChange and onFetch", () => {
  const onFetch = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <SearchBox label="Search" onFetch={onFetch} delay={0} />
  );
  const input = TestUtils.findRenderedDOMComponentWithTag(component, "input");
  input.value = "giraffe";
  TestUtils.Simulate.change(input);
  expect(input.value).toEqual("giraffe");
  expect(onFetch).toHaveBeenCalledWith("giraffe");
});

it("handles onClear", () => {
  const onClear = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <SearchBox label="Search" onClear={onClear} onFetch={jest.fn()} />
  );
  const input = TestUtils.findRenderedDOMComponentWithTag(component, "input");
  input.value = "panda";
  TestUtils.Simulate.change(input);
  expect(onClear).toHaveBeenCalledTimes(0);
  input.value = "";
  TestUtils.Simulate.change(input);
  expect(onClear).toHaveBeenCalledTimes(1);
  expect(input.value).toEqual("");
  input.value = "walrus";
  TestUtils.Simulate.change(input);
  const clearButton = TestUtils.findRenderedDOMComponentWithClass(
    component,
    "cdkicon-clear"
  );
  TestUtils.Simulate.click(clearButton);
  expect(onClear).toHaveBeenCalledTimes(2);
  expect(input.value).toEqual("");
});

it("mounts, updates and unmounts", () => {
  const div = document.createElement("div");
  ReactDOM.render(<SearchBox />, div);
  ReactDOM.render(<SearchBox label="Changed" />, div);
  ReactDOM.unmountComponentAtNode(div);
});

it("works as a controlled component", () => {
  const handleChange = jest.fn();
  const handleFetch = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <SearchBox value="" onChange={handleChange} onFetch={handleFetch} />
  );
  const input = TestUtils.findRenderedDOMComponentWithTag(component, "input");
  input.value = "test";
  TestUtils.Simulate.change(input);
  expect(handleChange).toHaveBeenCalled();
  jest.runAllTimers();
  expect(handleFetch).toHaveBeenCalledWith("test");
});
