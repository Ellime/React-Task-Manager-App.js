"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactIconToggle = require("@cdk-uip/react-icon-toggle");

var _reactIcon = require("@cdk-uip/react-icon");

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable react/no-deprecated */


/**
 * Search component comprising of a clickable icon and input.
 */
var SearchField = function (_React$Component) {
  _inherits(SearchField, _React$Component);

  function SearchField() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, SearchField);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SearchField.__proto__ || Object.getPrototypeOf(SearchField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: _this.props.value || "",
      searchVisible: _this.props.expanded,
      hasFocus: false
    }, _this.onSubmit = function (e) {
      e.preventDefault();
      _this.stopTimer();
      _this.props.onFetch && _this.props.onFetch(_this.state.value);
    }, _this.onChange = function (e) {
      _this.setState({ value: e.target.value });
      _this.startTimer();
      var onChange = _this.props.onChange;

      onChange && onChange(e);
    }, _this.onClear = function () {
      _this.setState({ value: "" });
      if (_this.props.onFetch) {
        _this.stopTimer();
        _this.props.onFetch("");
      }
      _this.input && _this.input.focus();
    }, _this.onToggle = function (toggled) {
      // Do not toggle off if the search box has text
      // Instead, give it focus
      if (!toggled && _this.state.value) {
        _this.setFocus();
        return;
      }
      _this.setState({ searchVisible: toggled }, function () {
        if (_this.state.searchVisible) {
          _this.setFocus();
        }
      });
    }, _this.onFocus = function () {
      _this.setState({ hasFocus: true });
    }, _this.onBlur = function (e) {
      _this.setState({ hasFocus: false }, function () {
        if (!_this.state.value) {
          // If the user clicks on the search icon then
          // we do not want to change state yet as it will
          // leave a ripple effect behind.
          setTimeout(function () {
            if (_this.mounted && !_this.mouseDownIcon) {
              _this.setState({ searchVisible: false });
            }
          }, 200);
        }
      });
    }, _this.onMouseDownIcon = function () {
      _this.mouseDownIcon = true;
    }, _this.onMouseUpIcon = function () {
      _this.mouseDownIcon = false;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SearchField, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mounted = true;
      if (this.props.expanded) {
        this.setFocus();
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.value && nextProps.value !== this.state.value) {
        this.setState({ value: nextProps.value });
      }
      if (typeof nextProps.expanded !== "undefined" && nextProps.expanded !== this.state.searchVisible) {
        this.setState({ searchVisible: nextProps.expanded });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.props.expanded && !prevProps.expanded) {
        this.setFocus();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.stopTimer();
      this.mounted = false;
    }
  }, {
    key: "setFocus",
    value: function setFocus() {
      this.input && this.input.focus();
    }
  }, {
    key: "startTimer",
    value: function startTimer() {
      var _this2 = this;

      this.stopTimer();
      this.timerId = setTimeout(function () {
        _this2.timerId = 0;
        _this2.mounted && _this2.props.onFetch && _this2.props.onFetch(_this2.state.value);
      }, 600);
    }
  }, {
    key: "stopTimer",
    value: function stopTimer() {
      clearTimeout(this.timerId);
      this.timerId = 0;
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          disabled = _props.disabled,
          fullWidth = _props.fullWidth;

      return _react2.default.createElement(
        "form",
        { className: "cdk-search-field", onSubmit: this.onSubmit },
        _react2.default.createElement(_reactIconToggle.IconToggle, {
          on: this.state.searchVisible,
          iconOn: "search",
          iconOff: "search",
          onChange: this.onToggle,
          onMouseDown: this.onMouseDownIcon,
          onMouseUp: this.onMouseUpIcon,
          disabled: disabled
        }),
        _react2.default.createElement(
          "div",
          {
            className: (0, _classnames2.default)("cdk-search-field--container", {
              "cdk-search-field--hidden": !this.state.searchVisible,
              "cdk-search-field--fullwidth": fullWidth
            })
          },
          _react2.default.createElement(
            "div",
            { className: "mdc-text-field mdc-text-field--fullwidth mdc-text-field--with-trailing-icon" },
            _react2.default.createElement(
              "div",
              { className: "cdk-search-field__input-container" },
              _react2.default.createElement("input", {
                className: "mdc-text-field__input",
                type: "text",
                value: this.state.value,
                onChange: this.onChange,
                onFocus: this.onFocus,
                onBlur: this.onBlur,
                disabled: !this.state.searchVisible,
                ref: function ref(input) {
                  _this3.input = input;
                }
              }),
              this.state.value && _react2.default.createElement(
                _reactIcon.Icon,
                {
                  className: "mdc-text-field__icon",
                  onClick: this.onClear,
                  tabIndex: "0"
                },
                "clear"
              ),
              _react2.default.createElement("div", {
                className: (0, _classnames2.default)("mdc-line-ripple", {
                  "mdc-line-ripple--active": this.state.hasFocus
                })
              })
            )
          )
        )
      );
    }
  }]);

  return SearchField;
}(_react2.default.Component);

SearchField.propTypes = {
  /**
   * The value to be displayed if this is a controlled component.
   * (i.e. the displayed value must always be provided `onChange()`)
   *
   * To use as an uncontrolled component do not pass `value` or `onChange`.
   */
  value: _propTypes.string,
  /** Called the the value is changed by the user. Display value does not change until a new `value` is provided. */
  onChange: _propTypes.func,
  /**
   * Called when search is executed either by:
   *
   * - Typing is stopped (600ms after last key press)
   * - Enter key is pressed
   *
   * The current value will be passed.
   */
  onFetch: _propTypes.func,
  /** Disable the component */
  disabled: _propTypes.bool,
  /** Make the text field full width */
  fullWidth: _propTypes.bool,
  /** Expand the text field */
  expanded: _propTypes.bool
};
exports.default = SearchField;