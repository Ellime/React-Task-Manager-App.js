/* eslint-disable react/no-deprecated */
import React from "react";
import classnames from "classnames";
import { IconToggle } from "@cdk-uip/react-icon-toggle";
import { Icon } from "@cdk-uip/react-icon";
import { bool, func, string } from "prop-types";

/**
 * Search component comprising of a clickable icon and input.
 */
export default class SearchField extends React.Component {
  static propTypes = {
    /**
     * The value to be displayed if this is a controlled component.
     * (i.e. the displayed value must always be provided `onChange()`)
     *
     * To use as an uncontrolled component do not pass `value` or `onChange`.
     */
    value: string,
    /** Called the the value is changed by the user. Display value does not change until a new `value` is provided. */
    onChange: func,
    /**
     * Called when search is executed either by:
     *
     * - Typing is stopped (600ms after last key press)
     * - Enter key is pressed
     *
     * The current value will be passed.
     */
    onFetch: func,
    /** Disable the component */
    disabled: bool,
    /** Make the text field full width */
    fullWidth: bool,
    /** Expand the text field */
    expanded: bool
  };

  state = {
    value: this.props.value || "",
    searchVisible: this.props.expanded,
    hasFocus: false
  };

  componentDidMount() {
    this.mounted = true;
    if (this.props.expanded) {
      this.setFocus();
    }
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.value && nextProps.value !== this.state.value) {
      this.setState({ value: nextProps.value });
    }
    if (
      typeof nextProps.expanded !== "undefined" &&
      nextProps.expanded !== this.state.searchVisible
    ) {
      this.setState({ searchVisible: nextProps.expanded });
    }
  }

  componentDidUpdate(prevProps, prevState) {
    if (this.props.expanded && !prevProps.expanded) {
      this.setFocus();
    }
  }

  componentWillUnmount() {
    this.stopTimer();
    this.mounted = false;
  }

  onSubmit = e => {
    e.preventDefault();
    this.stopTimer();
    this.props.onFetch && this.props.onFetch(this.state.value);
  };

  onChange = e => {
    this.setState({ value: e.target.value });
    this.startTimer();
    const { onChange } = this.props;
    onChange && onChange(e);
  };

  onClear = () => {
    this.setState({ value: "" });
    if (this.props.onFetch) {
      this.stopTimer();
      this.props.onFetch("");
    }
    this.input && this.input.focus();
  };

  onToggle = toggled => {
    // Do not toggle off if the search box has text
    // Instead, give it focus
    if (!toggled && this.state.value) {
      this.setFocus();
      return;
    }
    this.setState({ searchVisible: toggled }, () => {
      if (this.state.searchVisible) {
        this.setFocus();
      }
    });
  };

  onFocus = () => {
    this.setState({ hasFocus: true });
  };

  onBlur = e => {
    this.setState({ hasFocus: false }, () => {
      if (!this.state.value) {
        // If the user clicks on the search icon then
        // we do not want to change state yet as it will
        // leave a ripple effect behind.
        setTimeout(() => {
          if (this.mounted && !this.mouseDownIcon) {
            this.setState({ searchVisible: false });
          }
        }, 200);
      }
    });
  };

  setFocus() {
    this.input && this.input.focus();
  }

  onMouseDownIcon = () => {
    this.mouseDownIcon = true;
  };

  onMouseUpIcon = () => {
    this.mouseDownIcon = false;
  };

  startTimer() {
    this.stopTimer();
    this.timerId = setTimeout(() => {
      this.timerId = 0;
      this.mounted &&
        this.props.onFetch &&
        this.props.onFetch(this.state.value);
    }, 600);
  }

  stopTimer() {
    clearTimeout(this.timerId);
    this.timerId = 0;
  }

  render() {
    const { disabled, fullWidth } = this.props;
    return (
      <form className="cdk-search-field" onSubmit={this.onSubmit}>
        <IconToggle
          on={this.state.searchVisible}
          iconOn="search"
          iconOff="search"
          onChange={this.onToggle}
          onMouseDown={this.onMouseDownIcon}
          onMouseUp={this.onMouseUpIcon}
          disabled={disabled}
        />

        <div
          className={classnames("cdk-search-field--container", {
            "cdk-search-field--hidden": !this.state.searchVisible,
            "cdk-search-field--fullwidth": fullWidth
          })}
        >
          <div className="mdc-text-field mdc-text-field--fullwidth mdc-text-field--with-trailing-icon">
            <div className="cdk-search-field__input-container">
              <input
                className="mdc-text-field__input"
                type="text"
                value={this.state.value}
                onChange={this.onChange}
                onFocus={this.onFocus}
                onBlur={this.onBlur}
                disabled={!this.state.searchVisible}
                ref={input => {
                  this.input = input;
                }}
              />
              {this.state.value && (
                <Icon
                  className="mdc-text-field__icon"
                  onClick={this.onClear}
                  tabIndex="0"
                >
                  clear
                </Icon>
              )}
              <div
                className={classnames("mdc-line-ripple", {
                  "mdc-line-ripple--active": this.state.hasFocus
                })}
              />
            </div>
          </div>
        </div>
      </form>
    );
  }
}
