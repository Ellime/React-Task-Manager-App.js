import React from "react";
import ReactDOM from "react-dom";
import { SearchField } from ".";
import renderer from "react-test-renderer";
import TestUtils from "react-dom/test-utils";

jest.useFakeTimers();

it("renders", () => {
  const onChange = jest.fn();
  const onFetch = jest.fn();
  expect(
    renderer.create(
      <SearchField value="Search" onChange={onChange} onFetch={onFetch} />
    )
  ).toMatchSnapshot();
});

it("displays the search box", () => {
  const onChange = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <SearchField value="Search" onChange={onChange} />
  );
  const input = TestUtils.findRenderedDOMComponentWithTag(component, "input");
  expect(input.disabled).toBe(true);
  component.onToggle(true);
  expect(input.disabled).toBe(false);
});

it("handles onChange", () => {
  const onChange = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <SearchField value="Search" onChange={onChange} />
  );
  const input = TestUtils.findRenderedDOMComponentWithTag(component, "input");
  component.onToggle(true);
  TestUtils.Simulate.change(input);
  expect(onChange).toHaveBeenCalled();
});

it("handles onFetch when pressing Enter", () => {
  const onChange = jest.fn();
  const onFetch = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <SearchField value="Search" onChange={onChange} onFetch={onFetch} />
  );
  component.onToggle(true);
  const form = TestUtils.findRenderedDOMComponentWithTag(component, "form");
  TestUtils.Simulate.submit(form);
  expect(onFetch).toHaveBeenCalled();
});

it("handles onFetch when typing", () => {
  const onChange = jest.fn();
  const onFetch = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <SearchField value="Search" onChange={onChange} onFetch={onFetch} />
  );
  const input = TestUtils.findRenderedDOMComponentWithTag(component, "input");
  component.onToggle(true);

  TestUtils.Simulate.change(input);
  jest.runAllTimers();
  expect(onFetch).toHaveBeenCalled();
});

it("handles onFetch when cleared", () => {
  const onFetch = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <SearchField value="Search" onFetch={onFetch} />
  );
  component.onToggle(true);
  const clear = TestUtils.findRenderedDOMComponentWithClass(
    component,
    "mdc-text-field__icon"
  );
  TestUtils.Simulate.click(clear);
  expect(onFetch).toHaveBeenCalled();
});

it("hides the input on blur", () => {
  const onFetch = jest.fn();
  const component = TestUtils.renderIntoDocument(
    <SearchField value="" onFetch={onFetch} />
  );
  const input = TestUtils.findRenderedDOMComponentWithTag(component, "input");
  component.onToggle(true);
  TestUtils.Simulate.blur(input);
  jest.runAllTimers();
  expect(input.disabled).toBe(true);
});

it("mounts, updates and unmounts", () => {
  const div = document.createElement("div");
  ReactDOM.render(<SearchField />, div);
  ReactDOM.render(<SearchField value="Changed" />, div);
  ReactDOM.render(<SearchField value="Changed" expanded />, div);
  ReactDOM.unmountComponentAtNode(div);
});

it("renders expanded", () => {
  const component = TestUtils.renderIntoDocument(<SearchField expanded />);
  const input = TestUtils.findRenderedDOMComponentWithTag(component, "input");
  expect(input.disabled).toBe(false);
});
