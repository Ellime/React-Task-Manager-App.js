"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Select = function (_React$Component) {
  _inherits(Select, _React$Component);

  function Select() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Select);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Select.__proto__ || Object.getPrototypeOf(Select)).call.apply(_ref, [this].concat(args))), _this), _this.state = { hasFocus: false }, _this.onFocus = function () {
      _this.setState({ hasFocus: true });
    }, _this.onBlur = function () {
      _this.setState({ hasFocus: false });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Select, [{
    key: "render",
    value: function render() {
      var _props = this.props,
          className = _props.className,
          label = _props.label,
          disabled = _props.disabled,
          fullWidth = _props.fullWidth,
          children = _props.children,
          value = _props.value,
          box = _props.box,
          allowEmpty = _props.allowEmpty,
          invalid = _props.invalid,
          textField = _props.textField,
          native = _props.native,
          required = _props.required,
          other = _objectWithoutProperties(_props, ["className", "label", "disabled", "fullWidth", "children", "value", "box", "allowEmpty", "invalid", "textField", "native", "required"]);

      return _react2.default.createElement(
        "div",
        {
          className: (0, _classnames2.default)("mdc-select", {
            "mdc-select--full-width": fullWidth,
            "mdc-select--disabled": disabled,
            "mdc-select--box": box,
            "mdc-select--invalid": invalid
          }, className)
        },
        _react2.default.createElement(
          "select",
          _extends({
            className: (0, _classnames2.default)("mdc-select__native-control", {
              "mdc-select--invalid": invalid
            }, className),
            value: value || "",
            disabled: disabled,
            onFocus: this.onFocus,
            onBlur: this.onBlur,
            required: required
          }, other),
          _react2.default.createElement("option", { value: "", disabled: !allowEmpty }),
          children
        ),
        _react2.default.createElement(
          "label",
          {
            className: (0, _classnames2.default)("mdc-floating-label", {
              "mdc-floating-label--float-above": value
            })
          },
          label,
          required && "*"
        ),
        _react2.default.createElement("div", {
          className: (0, _classnames2.default)("mdc-line-ripple", {
            "mdc-line-ripple--active": this.state.hasFocus
          })
        })
      );
    }
  }]);

  return Select;
}(_react2.default.Component);

Select.propTypes = {
  /** The currently selected value. */
  value: _propTypes.any,
  /** The label. */
  label: _propTypes.node,
  /** Called when the selection has changed. */
  onChange: _propTypes.func,
  /** Disable the select */
  disabled: _propTypes.bool,
  /** Use a full-width select */
  fullWidth: _propTypes.bool,
  /** Styles the select as a box select */
  box: _propTypes.bool,
  /** Allow an empty value to be selected */
  allowEmpty: _propTypes.bool,
  /** Render as invalid */
  invalid: _propTypes.bool,
  /** Mark Select as required */
  required: _propTypes.bool
};
exports.default = Select;