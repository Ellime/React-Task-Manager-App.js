import React, { Fragment } from "react";
import { Select } from ".";
import { storiesOf } from "@storybook/react";
import { withKnobs, boolean, select } from "@storybook/addon-knobs";
import { IntlProvider, FormattedMessage, injectIntl } from "react-intl";

const data = [
  {
    value: "grains",
    label: "Bread, Cereal, Rice, and Pasta"
  },
  {
    value: "vegetables",
    label: "Vegetables"
  },
  {
    value: "dairy",
    label: "Milk, Yogurt, and Cheese"
  },
  {
    value: "meat",
    label: "Meat, Poultry, Fish, Dry Beans, Eggs, and Nuts"
  },
  {
    value: "fats",
    label: "Fats, Oils, and Sweets"
  }
];

storiesOf("select", module)
  .addDecorator(withKnobs)
  .add("props", () => {
    class Wrapper extends React.Component {
      state = { value: this.props.initialValue };

      onChange = e => {
        this.setState({ value: e.target.value });
      };

      render() {
        return (
          <div>
            <Select
              label="Pick a food"
              value={this.state.value}
              onChange={this.onChange}
              disabled={boolean("disabled", false)}
              fullWidth={boolean("fullWidth", false)}
              box={boolean("box", false)}
              invalid={boolean("invalid", false)}
              allowEmpty={boolean("allowEmpty", false)}
              required={boolean("required", false)}
            >
              {data.map(({ value, label }) => (
                <option key={value} value={value}>
                  {label}
                </option>
              ))}
            </Select>
            <p>You selected: {this.state.value}</p>
          </div>
        );
      }
    }
    const value = select(
      "Initial value",
      ["", ...data.map(item => item.value)],
      ""
    );
    return <Wrapper initialValue={value} />;
  })
  .add("controlled, FormattedMessage labels,  props", () => {
    class Wrapper extends React.Component {
      state = { value: this.props.initialValue };

      onChange = e => {
        this.setState({ value: e.target.value });
      };

      render() {
        return (
          <IntlProvider locale="en">
            <Fragment>
              <Select
                label={
                  <FormattedMessage
                    id="pickfood"
                    defaultMessage="Pick a food"
                  />
                }
                value={this.state.value}
                onChange={this.onChange}
                disabled={boolean("disabled", false)}
                fullWidth={boolean("fullWidth", false)}
                box={boolean("box", false)}
                invalid={boolean("invalid", false)}
                allowEmpty={boolean("allowEmpty", false)}
                required={boolean("required", false)}
              >
                <FormattedMessage id="option1" defaultMessage="Option 1">
                  {text => <option value="1">{text}</option>}
                </FormattedMessage>
                <FormattedMessage id="option2" defaultMessage="Option 2">
                  {text => <option value="2">{text}</option>}
                </FormattedMessage>
                <FormattedMessage id="option3" defaultMessage="Option 3">
                  {text => <option value="3">{text}</option>}
                </FormattedMessage>
              </Select>
              <p>
                <FormattedMessage
                  id="youselectedcolon"
                  defaultMessage="You selected:"
                />
                {this.state.value}
              </p>
            </Fragment>
          </IntlProvider>
        );
      }
    }
    const value = select(
      "Initial value",
      ["", ...data.map(item => item.value)],
      ""
    );
    return <Wrapper initialValue={value} />;
  })
  .add("react-intl function as child", () => (
    <IntlProvider locale="en">
      <Select fullWidth>
        <FormattedMessage id="option1" defaultMessage="Option 1">
          {text => <option value="1">{text}</option>}
        </FormattedMessage>
        <FormattedMessage id="option2" defaultMessage="Option 2">
          {text => <option value="2">{text}</option>}
        </FormattedMessage>
        <FormattedMessage id="option3" defaultMessage="Option 3">
          {text => <option value="3">{text}</option>}
        </FormattedMessage>
      </Select>
    </IntlProvider>
  ))
  .add("react-intl fragment", () => (
    <IntlProvider locale="en" textComponent={Fragment}>
      <Select fullWidth>
        <option value="1">
          <FormattedMessage id="option1" defaultMessage="Option 1" />
        </option>
        <option value="2">
          <FormattedMessage id="option2" defaultMessage="Option 2" />
        </option>
        <option value="3">
          <FormattedMessage id="option3" defaultMessage="Option 3" />
        </option>
      </Select>
    </IntlProvider>
  ))
  .add("react-intl injectIntl", () => {
    const Wrapper = ({ intl }) => (
      <Select fullWidth>
        <option value="1">
          {intl.formatMessage({
            id: "option1",
            defaultMessage: "Option 1"
          })}
        </option>
        <option value="2">
          {intl.formatMessage({
            id: "option2",
            defaultMessage: "Option 2"
          })}
        </option>
        <option value="3">
          {intl.formatMessage({
            id: "option3",
            defaultMessage: "Option 3"
          })}
        </option>
      </Select>
    );
    const WithIntl = injectIntl(Wrapper);
    return (
      <IntlProvider locale="en">
        <WithIntl />
      </IntlProvider>
    );
  })
  .add("with undefined value", () => {
    class Wrapper extends React.Component {
      state = { value: undefined };

      onChange = e => {
        this.setState({ value: e.target.value });
      };

      render() {
        return (
          <div>
            <Select
              label="Pick a food"
              value={this.state.value}
              onChange={this.onChange}
            >
              {data.map(({ value, label }) => (
                <option key={value} value={value}>
                  {label}
                </option>
              ))}
            </Select>
            <p>You selected: {this.state.value}</p>
          </div>
        );
      }
    }
    return <Wrapper />;
  });
