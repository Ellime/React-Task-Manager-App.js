"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _mdc = require("@material/slider/dist/mdc.slider");

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Slider = function (_React$Component) {
  _inherits(Slider, _React$Component);

  function Slider() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Slider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Slider.__proto__ || Object.getPrototypeOf(Slider)).call.apply(_ref, [this].concat(args))), _this), _this.onChange = function (e) {
      _this.props.onChange && _this.props.onChange(e.detail.value);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Slider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.slider) {
        this.MDCComponent = new _mdc.MDCSlider(this.slider);
        this.MDCComponent.listen("MDCSlider:change", this.onChange);
        this.setProps(this.props);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.MDCComponent) {
        this.MDCComponent.unlisten("MDCSlider:change", this.onChange);
        this.MDCComponent.destroy();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.setProps(this.props);
    }
  }, {
    key: "setProps",
    value: function setProps(props) {
      if (this.MDCComponent) {
        var min = props.min,
            max = props.max,
            step = props.step,
            value = props.value,
            disabled = props.disabled;

        this.MDCComponent.min = min;
        this.MDCComponent.max = max;
        this.MDCComponent.step = step;
        this.MDCComponent.value = value;
        this.MDCComponent.disabled = disabled;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          discrete = _props.discrete,
          value = _props.value,
          other = _objectWithoutProperties(_props, ["className", "discrete", "value"]);

      return _react2.default.createElement(
        "div",
        _extends({
          className: (0, _classnames2.default)("mdc-slider", { "mdc-slider--discrete": discrete }, className),
          tabIndex: "0",
          ref: function ref(slider) {
            _this2.slider = slider;
          },
          value: value
        }, other),
        _react2.default.createElement(
          "div",
          { className: "mdc-slider__track-container" },
          _react2.default.createElement("div", { className: "mdc-slider__track" })
        ),
        _react2.default.createElement(
          "div",
          { className: "mdc-slider__thumb-container" },
          discrete && _react2.default.createElement(
            "div",
            { className: "mdc-slider__pin" },
            _react2.default.createElement("span", { className: "mdc-slider__pin-value-marker" })
          ),
          _react2.default.createElement(
            "svg",
            { className: "mdc-slider__thumb", width: "21", height: "21" },
            _react2.default.createElement("circle", { cx: "10.5", cy: "10.5", r: "7.875" })
          ),
          _react2.default.createElement("div", { className: "mdc-slider__focus-ring" })
        )
      );
    }
  }]);

  return Slider;
}(_react2.default.Component);

Slider.propTypes = {
  /** Minimum value */
  min: _propTypes.number,
  /** Maximum value */
  max: _propTypes.number,
  /** Step value */
  step: _propTypes.number,
  /** The slider value. */
  value: _propTypes.number,
  /** Called when the value changes. */
  onChange: _propTypes.func,
  /** Use discrete values */
  discrete: _propTypes.bool,
  /** Disable the slider */
  disabled: _propTypes.bool
};
Slider.defaultProps = {
  min: 0,
  max: 100,
  value: 0
};
exports.default = Slider;