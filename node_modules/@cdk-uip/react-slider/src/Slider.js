import React from "react";
import classnames from "classnames";
import { MDCSlider } from "@material/slider/dist/mdc.slider";
import { bool, func, number } from "prop-types";

class Slider extends React.Component {
  static propTypes = {
    /** Minimum value */
    min: number,
    /** Maximum value */
    max: number,
    /** Step value */
    step: number,
    /** The slider value. */
    value: number,
    /** Called when the value changes. */
    onChange: func,
    /** Use discrete values */
    discrete: bool,
    /** Disable the slider */
    disabled: bool
  };

  static defaultProps = {
    min: 0,
    max: 100,
    value: 0
  };

  componentDidMount() {
    if (this.slider) {
      this.MDCComponent = new MDCSlider(this.slider);
      this.MDCComponent.listen("MDCSlider:change", this.onChange);
      this.setProps(this.props);
    }
  }

  componentWillUnmount() {
    if (this.MDCComponent) {
      this.MDCComponent.unlisten("MDCSlider:change", this.onChange);
      this.MDCComponent.destroy();
    }
  }

  componentDidUpdate() {
    this.setProps(this.props);
  }

  onChange = e => {
    this.props.onChange && this.props.onChange(e.detail.value);
  };

  setProps(props) {
    if (this.MDCComponent) {
      const { min, max, step, value, disabled } = props;
      this.MDCComponent.min = min;
      this.MDCComponent.max = max;
      this.MDCComponent.step = step;
      this.MDCComponent.value = value;
      this.MDCComponent.disabled = disabled;
    }
  }

  render() {
    const { className, discrete, value, ...other } = this.props;

    return (
      <div
        className={classnames(
          "mdc-slider",
          { "mdc-slider--discrete": discrete },
          className
        )}
        tabIndex="0"
        ref={slider => {
          this.slider = slider;
        }}
        value={value}
        {...other}
      >
        <div className="mdc-slider__track-container">
          <div className="mdc-slider__track" />
        </div>
        <div className="mdc-slider__thumb-container">
          {discrete && (
            <div className="mdc-slider__pin">
              <span className="mdc-slider__pin-value-marker" />
            </div>
          )}
          <svg className="mdc-slider__thumb" width="21" height="21">
            <circle cx="10.5" cy="10.5" r="7.875" />
          </svg>
          <div className="mdc-slider__focus-ring" />
        </div>
      </div>
    );
  }
}

export default Slider;
