"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames2 = require("classnames");

var _classnames3 = _interopRequireDefault(_classnames2);

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Inline status indicator.
 *
 * Available types:
 *
 * - Inactive - Use when status isn't available or isn't relevant.
 * - Informational - Use only if status isn't positive or negative.
 * - Positive - Use if information presented is completely positive.
 * - Warning - Can be used as either an alert (neither positive or negative) or if the information is slightly negative.
 * - Negative - Use if information is completely negative.
 */
var StatusIndicatorInline = function StatusIndicatorInline(_ref) {
  var className = _ref.className,
      type = _ref.type,
      children = _ref.children,
      other = _objectWithoutProperties(_ref, ["className", "type", "children"]);

  return _react2.default.createElement(
    "div",
    _extends({ className: (0, _classnames3.default)("cdk-status-indicator") }, other),
    _react2.default.createElement("div", {
      className: (0, _classnames3.default)("cdk-status-indicator-icon", _defineProperty({}, "cdk-status-indicator--inline__circle__" + type, type), className)
    }),
    _react2.default.createElement(
      "span",
      { className: "cdk-status-indicator--inline__text" },
      children
    )
  );
};

StatusIndicatorInline.propTypes = {
  /** Types */
  type: (0, _propTypes.oneOf)(["inactive", "positive", "informational", "warning", "negative"])
};

StatusIndicatorInline.defaultProps = {
  type: "inactive"
};

exports.default = StatusIndicatorInline;