import React, { Fragment } from "react";
import {
  Stepper,
  Step,
  StepIcon,
  StepIconCompleted,
  StepIconEditable,
  StepLabel,
  StepLabelText,
  StepLabelSecondaryText,
  StepDivider,
  HorizontalLinearStepper
} from ".";
import { Button } from "@cdk-uip/react-button";
import { storiesOf } from "@storybook/react";
import { action } from "@storybook/addon-actions";

const Container = ({ children }) => (
  <div style={{ backgroundColor: "#f5f5f5", padding: 16 }}>{children}</div>
);

storiesOf("stepper", module)
  .add("stepper", () => (
    <Container>
      <Stepper>
        <Step>
          <StepIconCompleted />
          <StepLabel>Select campaign settings</StepLabel>
        </Step>
        <StepDivider />
        <Step editable onClick={action("onClick")}>
          <StepIconEditable />
          <StepLabel>
            <StepLabelText>Create an ad group</StepLabelText>
            <StepLabelSecondaryText>Optional</StepLabelSecondaryText>
          </StepLabel>
        </Step>
        <StepDivider />
        <Step inactive>
          <StepIcon>3</StepIcon>
          <StepLabel>Create an ad</StepLabel>
        </Step>
      </Stepper>
    </Container>
  ))
  .add("controlled", () => {
    class Controlled extends React.Component {
      state = {
        steps: [
          { label: "Select campaign settings", completed: false },
          { label: "Create an ad group", completed: false },
          { label: "Create an ad", completed: false }
        ],
        activeStep: 0
      };

      handleBack = () =>
        this.setState(prevState => ({
          activeStep: prevState.activeStep - 1,
          steps: prevState.steps.map(
            (step, index) =>
              index === prevState.activeStep - 1
                ? { ...step, completed: false }
                : step
          )
        }));

      handleNext = () =>
        this.setState(prevState => ({
          activeStep: prevState.activeStep + 1,
          steps: prevState.steps.map(
            (step, index) =>
              index === prevState.activeStep
                ? { ...step, completed: true }
                : step
          )
        }));

      handleFinish = () =>
        this.setState(prevState => ({
          activeStep: prevState.steps.length - 1,
          steps: prevState.steps.map(step => ({
            ...step,
            completed: true
          }))
        }));

      handleReset = () =>
        this.setState(prevState => ({
          activeStep: 0,
          steps: prevState.steps.map(step => ({
            ...step,
            completed: false
          }))
        }));

      render() {
        const styles = {
          buttonContainer: {
            marginTop: 20
          },
          button: {
            marginRight: 8
          }
        };

        const { steps, activeStep } = this.state;
        const finished =
          steps.filter(step => step.completed).length === steps.length;

        return (
          <Container>
            <Stepper>
              {steps.map((step, index) => {
                return (
                  <Fragment key={index}>
                    <Step inactive={index > activeStep}>
                      {step.completed ? (
                        <StepIconCompleted />
                      ) : (
                        <StepIcon>{index + 1}</StepIcon>
                      )}
                      <StepLabel>{step.label}</StepLabel>
                    </Step>
                    {index < steps.length - 1 && <StepDivider />}
                  </Fragment>
                );
              })}
            </Stepper>

            <div style={styles.buttonContainer}>
              <div style={{ display: finished ? "none" : undefined }}>
                <Button
                  style={styles.button}
                  disabled={activeStep === 0}
                  onClick={this.handleBack}
                >
                  Back
                </Button>

                <Button
                  style={styles.button}
                  disabled={activeStep === steps.length - 1}
                  onClick={this.handleNext}
                >
                  Next
                </Button>

                <Button
                  raised
                  primary
                  style={styles.button}
                  onClick={this.handleFinish}
                >
                  Finish
                </Button>
              </div>

              <Button
                style={{ display: finished ? undefined : "none" }}
                onClick={this.handleReset}
              >
                Reset
              </Button>
            </div>
          </Container>
        );
      }
    }

    return <Controlled />;
  })
  .add("horizontal linear", () => {
    class Wrapper extends React.Component {
      state = {
        activeStep: 0,
        finished: false,
        steps: [
          <span>Select campaign settings</span>,
          <span>Create an ad group</span>,
          <span>Create an ad</span>,
          <span>Send email</span>
        ]
      };

      render() {
        const { activeStep, steps, finished } = this.state;
        return (
          <Container>
            <HorizontalLinearStepper {...this.state} />

            <div style={{ marginTop: 20 }}>
              <div style={{ display: finished ? "none" : undefined }}>
                <Button
                  disabled={activeStep === 0}
                  onClick={() =>
                    this.setState(prevState => ({
                      activeStep: prevState.activeStep - 1
                    }))
                  }
                >
                  Back
                </Button>

                <Button
                  onClick={() =>
                    this.setState(prevState => ({
                      finished:
                        prevState.activeStep === prevState.steps.length - 1,
                      activeStep: prevState.activeStep + 1
                    }))
                  }
                >
                  {activeStep === steps.length - 1 ? "Finish" : "Next"}
                </Button>
              </div>

              <div style={{ display: finished ? undefined : "none" }}>
                <Button
                  onClick={() =>
                    this.setState({
                      activeStep: 0,
                      finished: false
                    })
                  }
                >
                  Reset
                </Button>
              </div>
            </div>
          </Container>
        );
      }
    }
    return <Wrapper />;
  });
