import React, { Children, cloneElement } from "react";
import TabBar from "./TabBar";
import { any, bool, func } from "prop-types";

/**
 * Use when you want to store values against each tab instead of using
 * indexes. Similar to the `<RadioGroup>` component.
 */
const Tabs = ({
  className,
  icon,
  iconsWithText,
  scroll,
  onChange,
  children,
  ...other
}) => (
  <TabBar
    className={className}
    icons={icon}
    iconsWithText={iconsWithText}
    scroll={scroll}
  >
    {Children.toArray(children).map((child, index) => {
      const { value } = child.props;
      return cloneElement(child, {
        active: typeof value !== "undefined" && value === other.value,
        iconAndText: iconsWithText,
        onClick: () => onChange(value)
      });
    })}
  </TabBar>
);

Tabs.propTypes = {
  /** Currently selected tab value */
  value: any,
  /** Called when the active tab changes. Passed the new active index. */
  onChange: func,
  /** Icon-only tabs */
  icon: bool,
  /** Tabs with icons and text */
  iconsWithText: bool,
  /** Scrolling support */
  scroll: bool
};

Tabs.defaultProps = {
  onChange: () => {}
};

export default Tabs;
