"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require("prop-types");

var _reactNotchedOutline = require("@cdk-uip/react-notched-outline");

var _TextFieldPrefix = require("./TextFieldPrefix");

var _TextFieldPrefix2 = _interopRequireDefault(_TextFieldPrefix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TextField = function (_Component) {
  _inherits(TextField, _Component);

  function TextField() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TextField);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TextField.__proto__ || Object.getPrototypeOf(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      hasFocus: false,
      isValid: true,
      prefixWidth: 0,
      labelWidth: 0
    }, _this.onFocus = function (e) {
      _this.setState({ hasFocus: true });
      _this.props.onFocus(e);
    }, _this.onBlur = function (e) {
      _this.setState({ hasFocus: false, isValid: e.target.validity.valid });
      _this.props.onBlur(e);
    }, _this.onPrefixRef = function (ref) {
      _this.prefix = ref;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TextField, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.adjustInputPosition();
      this.getLabelWidth();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.props.prefix !== prevProps.prefix || this.state.hasFocus !== prevState.hasFocus) {
        this.adjustInputPosition();
      }

      if (this.props.label !== prevProps.label || this.props.dense !== prevProps.dense) {
        this.getLabelWidth();
      }
    }
  }, {
    key: "adjustInputPosition",
    value: function adjustInputPosition() {
      if (this.prefix) {
        this.setState({ prefixWidth: this.prefix.offsetWidth });
      }
    }
  }, {
    key: "getLabelWidth",
    value: function getLabelWidth() {
      if (this.label) {
        this.setState({
          labelWidth: this.label.offsetWidth * (this.props.dense ? 0.923 : 0.75)
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          className = _props.className,
          disabled = _props.disabled,
          id = _props.id,
          dense = _props.dense,
          fullWidth = _props.fullWidth,
          value = _props.value,
          label = _props.label,
          helperText = _props.helperText,
          box = _props.box,
          leadingIcon = _props.leadingIcon,
          trailingIcon = _props.trailingIcon,
          invalid = _props.invalid,
          readOnly = _props.readOnly,
          type = _props.type,
          prefix = _props.prefix,
          style = _props.style,
          boxFocus = _props.boxFocus,
          inputRef = _props.inputRef,
          onFocus = _props.onFocus,
          onBlur = _props.onBlur,
          outlined = _props.outlined,
          other = _objectWithoutProperties(_props, ["className", "disabled", "id", "dense", "fullWidth", "value", "label", "helperText", "box", "leadingIcon", "trailingIcon", "invalid", "readOnly", "type", "prefix", "style", "boxFocus", "inputRef", "onFocus", "onBlur", "outlined"]);

      var _state = this.state,
          hasFocus = _state.hasFocus,
          isValid = _state.isValid,
          prefixWidth = _state.prefixWidth,
          labelWidth = _state.labelWidth;

      var shouldFloat = function shouldFloat() {
        return value || hasFocus || type === "date" || type === "time" || type === "number";
      };

      return _react2.default.createElement(
        _react.Fragment,
        null,
        _react2.default.createElement(
          "label",
          {
            className: (0, _classnames2.default)("mdc-text-field", "mdc-text-field--upgraded", {
              "mdc-text-field--focused": hasFocus,
              "mdc-text-field--invalid": invalid || !isValid,
              "mdc-text-field--read-only": readOnly || !isValid,
              "mdc-text-field--dense": dense,
              "mdc-text-field--with-leading-icon": leadingIcon,
              "mdc-text-field--with-trailing-icon": trailingIcon,
              "mdc-text-field--box": box,
              "mdc-text-field--block": fullWidth,
              "mdc-text-field--disabled": disabled,
              "mdc-text-field--box-focus": boxFocus,
              "mdc-text-field--outlined": outlined
            }, className)
          },
          leadingIcon,
          prefix && shouldFloat() && _react2.default.createElement(
            _TextFieldPrefix2.default,
            { prefixRef: this.onPrefixRef },
            prefix
          ),
          _react2.default.createElement("input", _extends({
            className: "mdc-text-field__input",
            type: type,
            disabled: disabled,
            readOnly: readOnly,
            value: value,
            id: id,
            onFocus: this.onFocus,
            onBlur: this.onBlur,
            style: Object.assign({}, style, { paddingLeft: prefix && prefixWidth }),
            ref: inputRef
          }, other)),
          label && _react2.default.createElement(
            "span",
            {
              className: (0, _classnames2.default)("mdc-floating-label", {
                "mdc-floating-label--float-above": shouldFloat(),
                "mdc-floating-label--shake": !hasFocus && value && (invalid || !isValid)
              }),
              ref: function ref(_ref2) {
                _this2.label = _ref2;
              }
            },
            label
          ),
          trailingIcon,
          outlined && _react2.default.createElement(_reactNotchedOutline.NotchedOutline, {
            open: shouldFloat() && !!label,
            width: labelWidth
          }),
          !outlined && _react2.default.createElement("div", {
            className: (0, _classnames2.default)("mdc-line-ripple", {
              "mdc-line-ripple--active": hasFocus
            })
          })
        ),
        helperText
      );
    }
  }]);

  return TextField;
}(_react.Component);

TextField.propTypes = {
  /** The input value */
  value: (0, _propTypes.oneOfType)([_propTypes.string, _propTypes.number]),
  /** Called when the value is changed */
  onChange: _propTypes.func,
  /** The input type */
  type: _propTypes.string,
  /** The floating label text */
  label: _propTypes.node,
  /** Disable the text field */
  disabled: _propTypes.bool,
  /** For a more compact version */
  dense: _propTypes.bool,
  /** Full width text field */
  fullWidth: _propTypes.bool,
  /** Helper text to display below the text field */
  helperText: _propTypes.element,
  /** Enclose the text field in a box */
  box: _propTypes.bool,
  /** Leading icon element ("box" only) */
  leadingIcon: _propTypes.element,
  /** Trailing icon element ("box" only) */
  trailingIcon: _propTypes.element,
  /** Render as invalid */
  invalid: _propTypes.bool,
  /** Validation regex */
  pattern: _propTypes.string,
  /** Render as a box when the text field has focus */
  boxFocus: _propTypes.bool,
  /** Used to fetch a ref to the underlying input element */
  inputRef: _propTypes.func,
  /** Called when the underlying input receives focus */
  onFocus: _propTypes.func,
  /** Called when the underlying input loses focus */
  onBlur: _propTypes.func,
  /** Prefix. When applied the label will remain floated. */
  prefix: _propTypes.node,
  /** Enclose the text field in an outline */
  outlined: _propTypes.bool,
  /** Make the TextField readOnly */
  readOnly: _propTypes.bool
};
TextField.defaultProps = {
  boxFocus: true,
  inputRef: function inputRef() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {}
};
exports.default = TextField;