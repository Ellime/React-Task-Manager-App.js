import React from "react";
import { TextField, TextFieldIcon, TextFieldHelperText } from ".";
import { storiesOf } from "@storybook/react";
import { withKnobs, boolean, text, select } from "@storybook/addon-knobs";

storiesOf("text-field", module)
  .addDecorator(withKnobs)
  .add("props", () => {
    class Wrapper extends React.Component {
      state = { value: this.props.initialValue };
      render() {
        const helperText = text("Helper text", "Helper text");
        const validation = boolean("Helper text validation", false);
        const persistent = boolean("Persistent helper text", false);
        const icon = select("Icon", ["None", "Leading", "Trailing"], "None");

        return (
          <TextField
            type={text("Type", "text")}
            value={this.state.value}
            label={text("Label", "Label")}
            onChange={e => this.setState({ value: e.target.value })}
            {...(helperText
              ? {
                  helperText: (
                    <TextFieldHelperText
                      validation={validation}
                      persistent={persistent}
                    >
                      {helperText}
                    </TextFieldHelperText>
                  )
                }
              : {})}
            required={boolean("Required", false)}
            invalid={boolean("Invalid", false)}
            readOnly={boolean("Read-only", false)}
            disabled={boolean("Disabled", false)}
            dense={boolean("Dense", false)}
            fullWidth={boolean("Full-width", false)}
            box={boolean("Box", false)}
            outlined={boolean("Outlined", false)}
            {...(icon === "Leading"
              ? { leadingIcon: <TextFieldIcon>person</TextFieldIcon> }
              : {})}
            {...(icon === "Trailing"
              ? { trailingIcon: <TextFieldIcon>star</TextFieldIcon> }
              : {})}
            pattern={text("Pattern", "") || undefined}
            boxFocus={boolean("boxFocus", true)}
            prefix={text("prefix", "")}
          />
        );
      }
    }

    const initialValue = text("Initial value", "Hello, world!");
    return <Wrapper initialValue={initialValue} />;
  });
