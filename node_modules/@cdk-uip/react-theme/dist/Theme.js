"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * [Theme text and background colours.](https://github.com/material-components/material-components-web/blob/master/packages/mdc-theme/README.md)
 * You can use this instead of directly applying MDC Web theme classes.
 *
 * If you use this to wrap text then a `<span>` will be created with the correct MDC classes specifed.
 *
 * ```js
 * <Theme text="primary">This creates a span</Theme>
 * ```
 *
 * Use the `element` prop to render something different (a `div` or an `h1` for example).
 *
 * ```js
 * <Theme text="primary" element="h1">This creates a heading</Theme>
 * ```
 *
 * If you wrap elements or components then the appropriate MDC classes will be injected by manipulating
 * their `className` props and no additional elements are created. This allows you to inject theming
 * into existing components with affecting the DOM layout.
 *
 * ```js
 * <Theme text="text-primary-on-dark">
 *   <CardTitle>This component has the correct CSS classNames injected</CardTitle>
 * </Theme>
 * ```
 *
 * This gives you maximum flexibility and lets you theme any type of component.
 */
var Theme = function (_React$Component) {
  _inherits(Theme, _React$Component);

  function Theme() {
    _classCallCheck(this, Theme);

    return _possibleConstructorReturn(this, (Theme.__proto__ || Object.getPrototypeOf(Theme)).apply(this, arguments));
  }

  _createClass(Theme, [{
    key: "render",
    value: function render() {
      var _props = this.props,
          text = _props.text,
          background = _props.background,
          className = _props.className,
          children = _props.children,
          element = _props.element,
          other = _objectWithoutProperties(_props, ["text", "background", "className", "children", "element"]);

      return _react2.default.Children.map(children, function (child) {
        var _theme;

        if (child === null) {
          return null;
        }
        var theme = (_theme = {}, _defineProperty(_theme, "mdc-theme--" + text, text), _defineProperty(_theme, "mdc-theme--" + background, background), _theme);
        // Inject classes if this is an element
        if (_react2.default.isValidElement(child)) {
          return _react2.default.cloneElement(child, Object.assign({
            className: (0, _classnames2.default)(theme, className, child.props.className)
          }, other));
        }
        // No element? Create one.
        return _react2.default.createElement(element, Object.assign({
          className: (0, _classnames2.default)(theme, className)
        }, other), child);
      });
    }
  }]);

  return Theme;
}(_react2.default.Component);

Theme.propTypes = {
  /** The text theme */
  text: (0, _propTypes.oneOf)(["primary", "secondary", "on-primary", "on-secondary", "text-primary-on-background", "text-secondary-on-background", "text-hint-on-background", "text-disabled-on-background", "text-icon-on-background", "text-primary-on-light", "text-secondary-on-light", "text-hint-on-light", "text-disabled-on-light", "text-icon-on-light", "text-primary-on-dark", "text-secondary-on-dark", "text-hint-on-dark", "text-disabled-on-dark", "text-icon-on-dark"]),
  /** The background theme. */
  background: (0, _propTypes.oneOf)(["background", "primary-bg", "secondary-bg"]),
  /** The element to render when wrapping text (`div`, `h1`, etc.) */
  element: _propTypes.string
};
Theme.defaultProps = {
  element: "span"
};
exports.default = Theme;