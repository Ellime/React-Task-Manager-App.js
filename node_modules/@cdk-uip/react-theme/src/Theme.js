import React from "react";
import classnames from "classnames";
import { string, oneOf } from "prop-types";

/**
 * [Theme text and background colours.](https://github.com/material-components/material-components-web/blob/master/packages/mdc-theme/README.md)
 * You can use this instead of directly applying MDC Web theme classes.
 *
 * If you use this to wrap text then a `<span>` will be created with the correct MDC classes specifed.
 *
 * ```js
 * <Theme text="primary">This creates a span</Theme>
 * ```
 *
 * Use the `element` prop to render something different (a `div` or an `h1` for example).
 *
 * ```js
 * <Theme text="primary" element="h1">This creates a heading</Theme>
 * ```
 *
 * If you wrap elements or components then the appropriate MDC classes will be injected by manipulating
 * their `className` props and no additional elements are created. This allows you to inject theming
 * into existing components with affecting the DOM layout.
 *
 * ```js
 * <Theme text="text-primary-on-dark">
 *   <CardTitle>This component has the correct CSS classNames injected</CardTitle>
 * </Theme>
 * ```
 *
 * This gives you maximum flexibility and lets you theme any type of component.
 */
export default class Theme extends React.Component {
  static propTypes = {
    /** The text theme */
    text: oneOf([
      "primary",
      "secondary",
      "on-primary",
      "on-secondary",
      "text-primary-on-background",
      "text-secondary-on-background",
      "text-hint-on-background",
      "text-disabled-on-background",
      "text-icon-on-background",
      "text-primary-on-light",
      "text-secondary-on-light",
      "text-hint-on-light",
      "text-disabled-on-light",
      "text-icon-on-light",
      "text-primary-on-dark",
      "text-secondary-on-dark",
      "text-hint-on-dark",
      "text-disabled-on-dark",
      "text-icon-on-dark"
    ]),
    /** The background theme. */
    background: oneOf(["background", "primary-bg", "secondary-bg"]),
    /** The element to render when wrapping text (`div`, `h1`, etc.) */
    element: string
  };

  static defaultProps = {
    element: "span"
  };

  render() {
    const {
      text,
      background,
      className,
      children,
      element,
      ...other
    } = this.props;

    return React.Children.map(children, child => {
      if (child === null) {
        return null;
      }
      const theme = {
        [`mdc-theme--${text}`]: text,
        [`mdc-theme--${background}`]: background
      };
      // Inject classes if this is an element
      if (React.isValidElement(child)) {
        return React.cloneElement(child, {
          className: classnames(theme, className, child.props.className),
          ...other
        });
      }
      // No element? Create one.
      return React.createElement(
        element,
        {
          className: classnames(theme, className),
          ...other
        },
        child
      );
    });
  }
}
