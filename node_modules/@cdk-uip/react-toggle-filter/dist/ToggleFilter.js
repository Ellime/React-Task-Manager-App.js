"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Simple toggle styled to look like a chip. Similar to to the Switch
 * component and relies on an underlying native checkbox.
 *
 * > For an offical Material Design version used a `<ChipSet>` with
 * **filter chips**.
 */
var ToggleFilter = function ToggleFilter(_ref) {
  var id = _ref.id,
      className = _ref.className,
      children = _ref.children,
      other = _objectWithoutProperties(_ref, ["id", "className", "children"]);

  return _react2.default.createElement(
    "div",
    { className: "cdk-toggle-filter" },
    _react2.default.createElement("input", _extends({
      type: "checkbox",
      className: "cdk-toggle-filter__native-control",
      id: id
    }, other)),
    _react2.default.createElement(
      "label",
      { className: "cdk-toggle-filter__label", htmlFor: id },
      children
    )
  );
};

ToggleFilter.propTypes = {
  /** An ID is required for the component to operate correctly. */
  id: _propTypes.string.isRequired
};

exports.default = ToggleFilter;