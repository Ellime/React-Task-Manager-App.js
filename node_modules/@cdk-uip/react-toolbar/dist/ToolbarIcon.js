"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _reactIcon = require("@cdk-uip/react-icon");

var _propTypes = require("prop-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * Toolbar icon.
 *
 * Specify the icon to use as the child element, e.g.:
 *
 * ```js
 * <ToolbarIcon>favorite</ToolbarIcon>
 * ```
 *
 * If this is the first icon in a toolbar (usually the menu icon) then
 * specify the `menu` prop to add the required padding:
 *
 * ```js
 * <ToolbarIcon menu>home</ToolbarIcon>
 * ```
 *
 * If you want to display the actual menu icon then you can use the following
 * shortcut:
 *
 * ```js
 * <ToolbarIcon menu />
 * ```
 *
 * To make the icon clickable use the `href` prop or render as a button using
 * the `element` prop and include an `onClick` handler.
 */
var ToolbarIcon = function ToolbarIcon(_ref) {
  var element = _ref.element,
      className = _ref.className,
      menu = _ref.menu,
      children = _ref.children,
      other = _objectWithoutProperties(_ref, ["element", "className", "menu", "children"]);

  var T = element;
  return _react2.default.createElement(
    T,
    _extends({
      className: (0, _classnames2.default)({
        "mdc-toolbar__menu-icon": menu,
        "mdc-toolbar__icon": !menu
      }, className)
    }, other),
    _react2.default.createElement(
      _reactIcon.Icon,
      { "aria-hidden": "true" },
      children
    )
  );
};

ToolbarIcon.propTypes = {
  /** Element type ("a", "button", etc.) */
  element: _propTypes.string,
  /** Custom class */
  className: _propTypes.string,
  /** Left-most icon (usually a menu toggle) */
  menu: _propTypes.bool,
  /** Icon name */
  children: _propTypes.string
};

ToolbarIcon.defaultProps = {
  element: "a",
  children: "menu"
};

exports.default = ToolbarIcon;