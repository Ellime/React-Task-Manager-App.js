"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MIN_HORIZONTAL_MARGIN = 4;
var MIN_VERTICAL_MARGIN = 14;

/**
 * CDK Tooltip component.
 */

var Tooltip = function (_React$Component) {
  _inherits(Tooltip, _React$Component);

  function Tooltip() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Tooltip);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      show: false,
      active: false,
      deactive: false,
      top: "",
      left: "",
      right: ""
    }, _this.handleShow = function (e) {
      var pos = _this.adjustTooltipPosition();
      _this.setState(Object.assign({
        show: true,
        active: true,
        deactive: false
      }, pos));
    }, _this.handleHide = function (e) {
      _this.setState({ active: false, deactive: true });
    }, _this.handleRemove = function (e) {
      _this.setState({ show: false, active: false, deactive: false });
    }, _this.handleAnimationEnd = function (e) {
      if (e.animationName === "cdk-tooltip-exit-animation") {
        _this.handleRemove(e);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Tooltip, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.target = document.getElementById(this.props.htmlFor);
      if (this.target) {
        // Create events
        this.target.addEventListener("mouseenter", this.handleShow);
        this.target.addEventListener("mouseleave", this.handleHide);
        window.addEventListener("scroll", this.handleRemove);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.target) {
        // Remove events
        this.target.removeEventListener("mouseenter", this.handleShow);
        this.target.removeEventListener("mouseleave", this.handleHide);
        window.removeEventListener("scroll", this.handleRemove);
      }
    }
  }, {
    key: "getTooltipSize",
    value: function getTooltipSize() {
      var tooltipProps = this.tooltip.getBoundingClientRect();
      return {
        height: tooltipProps.bottom - tooltipProps.top,
        width: tooltipProps.right - tooltipProps.left
      };
    }
  }, {
    key: "adjustTooltipPosition",
    value: function adjustTooltipPosition() {
      var viewportHeight = window.innerHeight;
      var viewportWidth = window.innerWidth;

      var tooltipSize = this.getTooltipSize();
      var referenceProps = this.target.getBoundingClientRect();
      var referenceWidth = referenceProps.right - referenceProps.left;
      var widthDifference = Math.abs(tooltipSize.width - referenceWidth);

      var position = {};

      // Vertical position
      if (referenceProps.bottom + tooltipSize.height + MIN_VERTICAL_MARGIN < viewportHeight) {
        // show tooltip at bottom
        position.top = referenceProps.bottom + MIN_VERTICAL_MARGIN + "px";
      } else {
        // show tooltip at top
        position.top = referenceProps.top - tooltipSize.height - MIN_VERTICAL_MARGIN + "px";
      }

      // Horizontal position
      if (referenceProps.left + tooltipSize.width - widthDifference / 2 < viewportWidth) {
        // adjust left property
        var left = referenceProps.left < widthDifference / 2 ? 0 : referenceProps.left - widthDifference / 2;
        var calculatedLeft = left < MIN_HORIZONTAL_MARGIN ? MIN_HORIZONTAL_MARGIN : left;
        position.left = calculatedLeft + "px";
      } else {
        // adjust right property
        position.right = MIN_HORIZONTAL_MARGIN + "px";
      }

      return position;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          htmlFor = _props.htmlFor,
          className = _props.className,
          children = _props.children,
          other = _objectWithoutProperties(_props, ["htmlFor", "className", "children"]);

      return _react2.default.createElement(
        "span",
        _extends({
          htmlFor: htmlFor,
          className: (0, _classnames2.default)("cdk-tooltip", {
            "cdk-tooltip--show": this.state.show,
            "cdk-tooltip--is-active": this.state.active,
            "cdk-tooltip--is-deactive": this.state.deactive
          }, className),
          style: {
            top: this.state.top,
            left: this.state.left,
            right: this.state.right
          },
          ref: function ref(tooltip) {
            _this2.tooltip = tooltip;
          },
          onAnimationEnd: this.handleAnimationEnd
        }, other),
        children
      );
    }
  }]);

  return Tooltip;
}(_react2.default.Component);

Tooltip.propTypes = {
  /** The id of the component that the tooltip is for. */
  htmlFor: _propTypes2.default.string.isRequired,
  /** The tooltip label */
  children: _propTypes2.default.node.isRequired
};
exports.default = Tooltip;