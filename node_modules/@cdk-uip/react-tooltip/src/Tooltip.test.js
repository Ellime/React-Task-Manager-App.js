import React, { Fragment } from "react";
import ReactDOM from "react-dom";
import TestUtils from "react-dom/test-utils";
import { Tooltip } from ".";
import renderer from "react-test-renderer";

it("renders", () => {
  expect(
    renderer.create(
      <Fragment>
        <p id="test">Paragraph</p>
        <Tooltip htmlFor="test" className="custom">
          Tooltip
        </Tooltip>
      </Fragment>
    )
  ).toMatchSnapshot();
});

it("mounts and unmounts", () => {
  const div = document.createElement("div");
  div.id = "test";
  document.body.appendChild(div);
  ReactDOM.render(<Tooltip htmlFor="test">Tooltip</Tooltip>, div);
  ReactDOM.unmountComponentAtNode(div);
  document.body.removeChild(div);
});

it("shows and hides the tooltip", () => {
  const div = document.createElement("div");
  div.id = "test";
  document.body.appendChild(div);

  const component = TestUtils.renderIntoDocument(
    <Tooltip htmlFor="test">Tooltip</Tooltip>,
    div
  );
  div.dispatchEvent(new MouseEvent("mouseenter"));
  const tooltip = TestUtils.findRenderedDOMComponentWithClass(
    component,
    "cdk-tooltip"
  );
  expect(tooltip.classList.contains("cdk-tooltip--show")).toBe(true);
  expect(tooltip.classList.contains("cdk-tooltip--is-deactive")).toBe(false);

  div.dispatchEvent(new MouseEvent("mouseleave"));
  expect(tooltip.classList.contains("cdk-tooltip--is-deactive")).toBe(true);

  window.dispatchEvent(new Event("scroll"));
  expect(tooltip.classList.contains("cdk-tooltip--show")).toBe(false);
  expect(tooltip.classList.contains("cdk-tooltip--is-deactive")).toBe(false);

  document.body.removeChild(div);
});
