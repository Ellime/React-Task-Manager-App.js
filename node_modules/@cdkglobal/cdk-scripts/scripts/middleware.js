'use strict';

const util = require('util');
const path = require('path');
const fs = require('fs-extra');
const logAPI = util.debuglog('api');
const paths = require('../config/paths');

// Mock file extensions in prefered order
const extensions = ['js', 'json'];

const getFileName = (method, segments) => {
  const f = extension => `${method}-${segments.join('-')}.${extension}`;
  for (let e of extensions) {
    const fileName = f(e);
    if (fs.existsSync(getFullPath(fileName))) {
      return fileName;
    }
  }
  return false;
};

const getFullPath = file => {
  if (file) {
    return path.join(paths.appAPIMocks, file);
  }
  return false;
};

const resolveFile = (req, ctx) => {
  // Split the path into segments
  const segments = req.path
    .split('/')
    .filter(item => item)
    .slice(1);

  // Keep track of which combinations have been tested
  const wildcards = segments.map(() => false);
  let current = -1; // -1 to try with the full file name first

  // Attempt to match a file on disk allowing for wildcards
  // For now, only allow for one wildcard in the whole path (which is mostly sufficient to replace the ID e.g. /api/surveys/123/questions => GET-surveys-*-questions.json)
  do {
    // Format the filename
    const filename = getFileName(
      req.method,
      segments.map((item, i) => (i === current ? 'x' : item))
    );

    if (filename) {
      // Found a mathcing file, return it
      ctx.x = segments[current];
      return filename;
    }
    // move off to the next wildcard
    wildcards[current++] = true;
  } while (!wildcards.every(item => item));

  // None found. Return the full file name which will 404
  return getFileName(req.method, segments);
};

module.exports = (req, res, next) => {
  if (req.path.startsWith('/api/')) {
    const ctx = {};
    // Full path of the resource
    const resource = getFullPath(resolveFile(req, ctx));
    logAPI(resource);

    const extName = resource ? path.extname(resource) : null;

    if (extName === '.js') {
      // Found .js mock, require and call it
      const mockFn = require(resource);
      if (typeof mockFn === 'function') {
        Promise.resolve(mockFn(req, res, ctx)).then(retVal => {
          // if the mock function has sent headers then don't attempt to handle the response
          if (!res.headersSent) {
            res.send(retVal);
          }
        });
      } else {
        const err = '.js mock must export function.';
        logAPI(err);
        res.status(404).send(err);
      }
    } else if (resource) {
      // Use json file, send it
      res.sendFile(resource, err => {
        if (err) {
          logAPI(err);
          res.status(404).send(`Not found: ${resource}`);
        }
      });
    } else {
      res.status(404).send(`Could not find any mocks for: ${req.path}`);
    }
  } else {
    next();
  }
};
