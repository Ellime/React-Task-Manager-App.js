import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { IntlProvider, FormattedMessage, FormattedDate } from 'react-intl';
import { loadLocaleData, loadMessages } from './lib/i18n';
import { localeData, messages } from './i18n';
import { addLocaleData } from 'react-intl';

class LocaleSample extends Component {
  state = {
    locale: 'en-GB',
    language: 'en',
  };
  render() {
    const { locale, language, onChangeLocale, onChangeLanguage } = this.props;
    return (
      <div style={{ border: '1px solid' }}>
        <p>
          Locale:
          {' '}
          <select value={locale} onChange={e => onChangeLocale(e.target.value)}>
            <option value="en-GB">en-GB</option>
            <option value="en-US">en-US</option>
            <option value="fi-FI">fi-FI</option>
          </select>
        </p>
        <p>
          Language:
          {' '}
          <select
            value={language}
            onChange={e => onChangeLanguage(e.target.value)}
          >
            <option value="en">en</option>
            <option value="fi">fi</option>
          </select>
        </p>
        <p>
          Translate this:
          {' '}
          <FormattedMessage id="App.helloWorld" defaultMessage="Hello world!" />
        </p>
        <p>
          Today is:
          {' '}
          <FormattedDate value={new Date()} />
          {' '}
          (
          <FormattedDate
            value={new Date()}
            year="numeric"
            month="long"
            day="2-digit"
          />
          )
        </p>
      </div>
    );
  }
}

const withLocaleState = WrappedComponent => {
  class LocaleState extends Component {
    state = {
      locale: 'en-GB',
      language: 'en',
    };
    render() {
      const { locale, language } = this.state;
      return (
        <WrappedComponent
          {...this.props}
          locale={locale}
          language={language}
          onChangeLocale={locale => this.setState({ locale })}
          onChangeLanguage={language => this.setState({ language })}
        />
      );
    }
  }
  return LocaleState;
};

const Loader = ({ show, children }) => (
  <div>
    <div style={{ display: show ? 'none' : 'block' }}>
      {children}
    </div>
    <div style={{ display: show ? 'block' : 'none' }}>
      Loading...
    </div>
  </div>
);

export const withLocaleData = (WrappedComponent, localeDataMap) => {
  class LocaleDataLoader extends Component {
    static propTypes = {
      locale: PropTypes.string.isRequired,
    };
    state = {
      loading: true,
    };
    componentDidMount() {
      this.loadLocaleData();
    }
    componentWillReceiveProps(nextProps) {
      if (nextProps.locale !== this.props.locale) {
        console.log('locale has changed', this.props.locale, nextProps.locale);
        this.setState({ loading: true });
        this.loadLocaleData(nextProps);
      }
    }
    loadLocaleData(props = this.props) {
      const { locale } = props;
      loadLocaleData(localeDataMap, locale).then(data => {
        console.log('loaded locale data', locale);
        addLocaleData(data);
        this.setState({ loading: false });
      });
    }
    render() {
      const { loading } = this.state;
      return (
        <Loader show={loading}>
          <WrappedComponent {...this.props} />
        </Loader>
      );
    }
  }
  return LocaleDataLoader;
};

export const withMessages = (WrappedComponent, messagesMap) => {
  class MessagesLoader extends Component {
    static propTypes = {
      language: PropTypes.string.isRequired,
    };
    state = {
      messages: {},
      loading: true,
    };
    componentDidMount() {
      this.loadMessages();
    }
    componentWillReceiveProps(nextProps) {
      if (nextProps.language !== this.props.language) {
        console.log(
          'language has changed',
          this.props.language,
          nextProps.language
        );
        this.setState({ loading: true });
        this.loadMessages(nextProps);
      }
    }
    loadMessages(props = this.props) {
      const { language } = props;
      loadMessages(messagesMap, language).then(messages => {
        console.log('loaded messages', language);
        this.setState({ messages, loading: false });
      });
    }
    render() {
      const { messages, loading } = this.state;
      return (
        <Loader show={loading}>
          <WrappedComponent {...this.props} messages={messages} />
        </Loader>
      );
    }
  }
  return MessagesLoader;
};

const withIntl = WrappedComponent => props => (
  <IntlProvider locale={props.locale} messages={props.messages}>
    <WrappedComponent {...props} />
  </IntlProvider>
);

export default withLocaleState(
  withLocaleData(withMessages(withIntl(LocaleSample), messages), localeData)
);
