"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearRoutes = exports.registerRoutes = exports.clearStatusCodes = exports.registerStatusCodes = exports._delete = exports.post = exports.patch = exports.put = exports.get = exports.formatUrl = exports.buildQueryString = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _uuid = require("uuid");

// Map of status codes -> errors
var statusCodes = {};

// URL Routing
var mappedRoutes = {};

var defaultOptions = {};

var checkStatus = function checkStatus(response) {
  if (response.status >= 200 && response.status < 300) {
    return response;
  } else {
    // attempt to parse the response
    return parseResponse(response).then(function (payload) {
      if (statusCodes[response.status]) {
        // this is now a "friendly" error, do not include detail
        throw new Error(statusCodes[response.status]);
      }
      var error = new Error(payload.message || payload.msg || response.statusText);
      error.response = response;
      error.payload = payload;
      throw error;
    }, function () {
      if (statusCodes[response.status]) {
        throw new Error(statusCodes[response.status]);
      }
      var error = new Error(response.statusText);
      error.response = response;
      throw error;
    });
  }
};

var parseResponse = function parseResponse(response) {
  var contentType = response.headers.get("content-type");
  if (contentType && contentType.indexOf("application/json") > -1) {
    return response.json();
  }
  return response.text();
};

var setDefaultOptions = function setDefaultOptions(options) {
  defaultOptions = _extends({}, defaultOptions, options);
};

var clearDefaultOptions = function clearDefaultOptions() {
  defaultOptions = {};
};

var exec = function exec(url, options) {
  options = _extends({
    credentials: "same-origin"
  }, defaultOptions, options);
  var requestUrl = formatUrl(url);
  var p = fetch(requestUrl, options).then(checkStatus).then(parseResponse);
  p.catch(function (error) {
    console.error("Request failed '" + requestUrl + "'", error);
  });
  return p;
};

var buildQueryString = exports.buildQueryString = function buildQueryString(options) {
  // apply the default options
  options = _extends({
    query: {},
    startBy: "?",
    splitBy: "&"
  }, options);
  var query = "";
  for (var prop in options.query) {
    if (!prop || !options.query.hasOwnProperty(prop)) {
      continue;
    }
    if ((typeof prop === "undefined" ? "undefined" : _typeof(prop)) === "object") {
      // do not attempt to send complex context objects
      continue;
    }
    if (!options.query[prop]) {
      // skip anything falsey (even 0)
      continue;
    }
    var item = encodeURIComponent(prop) + "=" + encodeURIComponent(options.query[prop]);
    if (query) {
      query += options.splitBy + item;
    } else {
      query = item;
    }
  }
  return query ? options.startBy + query : "";
};

var applyRouting = function applyRouting(url) {
  for (var key in mappedRoutes) {
    var regex = new RegExp("^" + key);
    if (regex.test(url)) {
      return url.replace(regex, mappedRoutes[key]);
    }
  }
  return url;
};

var formatUrl = exports.formatUrl = function formatUrl(spec) {
  // allow a plain string
  spec = typeof spec === "string" ? { baseUrl: spec } : spec;
  // options object
  var url = applyRouting(spec.baseUrl);
  url += buildQueryString({
    query: spec.query
  });
  return url;
};

var addCorrelationId = function addCorrelationId() {
  var headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return _extends({
    correlationId: (0, _uuid.v4)()
  }, headers);
};

var get = exports.get = function get(_ref) {
  var url = _ref.url,
      _ref$headers = _ref.headers,
      headers = _ref$headers === undefined ? {} : _ref$headers;

  return exec(url, {
    method: "GET",
    headers: addCorrelationId(_extends({
      Accept: "application/json"
    }, headers))
  });
};

var put = exports.put = function put(_ref2) {
  var url = _ref2.url,
      data = _ref2.data,
      _ref2$headers = _ref2.headers,
      headers = _ref2$headers === undefined ? {} : _ref2$headers;

  return exec(url, {
    method: "PUT",
    headers: addCorrelationId(_extends({
      Accept: "application/json",
      "Content-Type": "application/json;charset=UTF-8"
    }, headers)),
    body: JSON.stringify(data)
  });
};

var patch = exports.patch = function patch(_ref3) {
  var url = _ref3.url,
      data = _ref3.data,
      _ref3$headers = _ref3.headers,
      headers = _ref3$headers === undefined ? {} : _ref3$headers;

  return exec(url, {
    method: "PATCH",
    headers: addCorrelationId(_extends({
      Accept: "application/json",
      "Content-Type": "application/json;charset=UTF-8"
    }, headers)),
    body: JSON.stringify(data)
  });
};

var post = exports.post = function post(_ref4) {
  var url = _ref4.url,
      data = _ref4.data,
      _ref4$headers = _ref4.headers,
      headers = _ref4$headers === undefined ? {} : _ref4$headers;

  return exec(url, {
    method: "POST",
    headers: addCorrelationId(_extends({
      Accept: "application/json",
      "Content-Type": "application/json;charset=UTF-8"
    }, headers)),
    body: JSON.stringify(data)
  });
};

var _delete = exports._delete = function _delete(_ref5) {
  var url = _ref5.url,
      _ref5$headers = _ref5.headers,
      headers = _ref5$headers === undefined ? {} : _ref5$headers;

  return exec(url, {
    method: "DELETE",
    headers: addCorrelationId(_extends({
      Accept: "application/json"
    }, headers))
  });
};

var registerStatusCodes = exports.registerStatusCodes = function registerStatusCodes(codes) {
  statusCodes = _extends({ statusCodes: statusCodes }, codes);
};

var clearStatusCodes = exports.clearStatusCodes = function clearStatusCodes() {
  statusCodes = {};
};

var registerRoutes = exports.registerRoutes = function registerRoutes(routes) {
  mappedRoutes = _extends({ mappedRoutes: mappedRoutes }, routes);
};

var clearRoutes = exports.clearRoutes = function clearRoutes() {
  mappedRoutes = {};
};

// new API
exports.default = {
  get: get,
  put: put,
  patch: patch,
  post: post,
  delete: _delete,
  registerStatusCodes: registerStatusCodes,
  clearStatusCodes: clearStatusCodes,
  registerRoutes: registerRoutes,
  clearRoutes: clearRoutes,
  buildQueryString: buildQueryString,
  formatUrl: formatUrl,
  setDefaultOptions: setDefaultOptions,
  clearDefaultOptions: clearDefaultOptions
};