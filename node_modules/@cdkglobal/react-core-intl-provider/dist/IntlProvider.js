"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.params = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactIntl = require("react-intl");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var params = exports.params = function params(locale) {
  var parts = locale.split(/[_-]+/);
  return {
    primary: parts[0] && parts[0].toLowerCase(),
    region: parts[1] && parts[1].toUpperCase()
  };
};

/**
 * A replacement for `react-intl` IntlProvider.
 * Allows you to separate messages from the locale settings.
 * Supply `loadLocaleData` and `loadMessages` props to load locale data and the message hash.
 */

var IntlProvider = function (_React$Component) {
  _inherits(IntlProvider, _React$Component);

  function IntlProvider() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, IntlProvider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = IntlProvider.__proto__ || Object.getPrototypeOf(IntlProvider)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      localeDataLoaded: false,
      messagesLoaded: false,
      messages: {}
    }, _this._promises = {
      setMessages: new Promise(function (resolve) {
        return resolve();
      }),
      loadLocaleData: new Promise(function (resolve) {
        return resolve();
      })
    }, _this.setLocale = function (locale) {
      // Trying to render mid-load will be bad
      _this.setState({ localeDataLoaded: false });
      // Call the function to load the locale data
      _this._promises.loadLocaleData = _this._promises.loadLocaleData.then(function () {
        return (
          // Invoke next "loadLocaleData" only after previous resolves
          _this.props.loadLocaleData(params(locale)).then(function (data) {
            (0, _reactIntl.addLocaleData)(data);
            _this.setState({ localeDataLoaded: true });
          })
        );
      });
    }, _this.setLanguage = function (language) {
      _this._promises.setMessages = _this._promises.setMessages.then(function () {
        return (
          // Invoke next "loadMessages" only after previous resolves
          _this.props.loadMessages(params(language)).then(function (data) {
            _this.setState({ messages: data, messagesLoaded: true });
          })
        );
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(IntlProvider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _props = this.props,
          locale = _props.locale,
          language = _props.language;

      this.setLocale(locale);
      this.setLanguage(language);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.locale !== this.props.locale) {
        this.setLocale(nextProps.locale);
      }
      if (nextProps.language !== this.props.language) {
        this.setLanguage(nextProps.language);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _state = this.state,
          localeDataLoaded = _state.localeDataLoaded,
          messagesLoaded = _state.messagesLoaded,
          messages = _state.messages;

      // initialising? do not render the app yet

      if (!localeDataLoaded || !messagesLoaded) {
        return null;
      }

      var _props2 = this.props,
          locale = _props2.locale,
          defaultLocale = _props2.defaultLocale,
          children = _props2.children;


      return _react2.default.createElement(
        _reactIntl.IntlProvider,
        {
          locale: locale,
          messages: messages,
          defaultLocale: defaultLocale
        },
        children
      );
    }
  }]);

  return IntlProvider;
}(_react2.default.Component);

IntlProvider.propTypes = {
  /**
   * Function returning a promise that loads a locale data object from `react-intl/locale-data/nn`.
   * Passed an object with `primary` and `region`.
   */
  loadLocaleData: _propTypes2.default.func.isRequired,
  /**
   * Function returning a promise that loads a hash of `react-intl` messages.
   * Passed an object with `primary` and `region`.
   */
  loadMessages: _propTypes2.default.func.isRequired,
  /** Current locale */
  locale: _propTypes2.default.string.isRequired,
  /** Current language */
  language: _propTypes2.default.string.isRequired,
  /** The locale which the default messages are in. ISO 639-1 code. */
  defaultLocale: _propTypes2.default.string,
  /** The content to render using the i18n settings */
  children: _propTypes2.default.any
};
IntlProvider.defaultProps = {
  defaultLocale: "en"
};
exports.default = IntlProvider;