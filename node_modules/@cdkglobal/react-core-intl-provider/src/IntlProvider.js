import React from "react";
import PropTypes from "prop-types";
import { addLocaleData, IntlProvider as ReactIntlProvider } from "react-intl";

export const params = locale => {
  const parts = locale.split(/[_-]+/);
  return {
    primary: parts[0] && parts[0].toLowerCase(),
    region: parts[1] && parts[1].toUpperCase()
  };
};

/**
 * A replacement for `react-intl` IntlProvider.
 * Allows you to separate messages from the locale settings.
 * Supply `loadLocaleData` and `loadMessages` props to load locale data and the message hash.
 */
export default class IntlProvider extends React.Component {
  static propTypes = {
    /**
     * Function returning a promise that loads a locale data object from `react-intl/locale-data/nn`.
     * Passed an object with `primary` and `region`.
     */
    loadLocaleData: PropTypes.func.isRequired,
    /**
     * Function returning a promise that loads a hash of `react-intl` messages.
     * Passed an object with `primary` and `region`.
     */
    loadMessages: PropTypes.func.isRequired,
    /** Current locale */
    locale: PropTypes.string.isRequired,
    /** Current language */
    language: PropTypes.string.isRequired,
    /** The locale which the default messages are in. ISO 639-1 code. */
    defaultLocale: PropTypes.string,
    /** The content to render using the i18n settings */
    children: PropTypes.any
  };

  static defaultProps = {
    defaultLocale: "en"
  };

  state = {
    localeDataLoaded: false,
    messagesLoaded: false,
    messages: {}
  };

  _promises = {
    setMessages: new Promise(resolve => resolve()),
    loadLocaleData: new Promise(resolve => resolve())
  };

  componentDidMount() {
    const { locale, language } = this.props;
    this.setLocale(locale);
    this.setLanguage(language);
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.locale !== this.props.locale) {
      this.setLocale(nextProps.locale);
    }
    if (nextProps.language !== this.props.language) {
      this.setLanguage(nextProps.language);
    }
  }

  setLocale = locale => {
    // Trying to render mid-load will be bad
    this.setState({ localeDataLoaded: false });
    // Call the function to load the locale data
    this._promises.loadLocaleData = this._promises.loadLocaleData.then(() =>
      // Invoke next "loadLocaleData" only after previous resolves
      this.props.loadLocaleData(params(locale)).then(data => {
        addLocaleData(data);
        this.setState({ localeDataLoaded: true });
      })
    );
  };

  setLanguage = language => {
    this._promises.setMessages = this._promises.setMessages.then(() =>
      // Invoke next "loadMessages" only after previous resolves
      this.props.loadMessages(params(language)).then(data => {
        this.setState({ messages: data, messagesLoaded: true });
      })
    );
  };

  render() {
    const { localeDataLoaded, messagesLoaded, messages } = this.state;

    // initialising? do not render the app yet
    if (!localeDataLoaded || !messagesLoaded) {
      return null;
    }

    const { locale, defaultLocale, children } = this.props;

    return (
      <ReactIntlProvider
        locale={locale}
        messages={messages}
        defaultLocale={defaultLocale}
      >
        {children}
      </ReactIntlProvider>
    );
  }
}
