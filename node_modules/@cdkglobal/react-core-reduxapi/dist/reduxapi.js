"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createApiMiddleware = exports.apiMiddleware = exports.middleware = exports.CALL_API = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _reactCoreHttp = require("@cdkglobal/react-core-http");

var _reactCoreHttp2 = _interopRequireDefault(_reactCoreHttp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var CALL_API = exports.CALL_API = "__CallAPI__";

var _FETCH = {
  GET: _reactCoreHttp2.default.get,
  POST: _reactCoreHttp2.default.post,
  PUT: _reactCoreHttp2.default.put,
  DELETE: _reactCoreHttp2.default.delete,
  PATCH: _reactCoreHttp2.default.patch
};

var dispatchAction = function dispatchAction(dispatch, type, data, args) {
  if (typeof type === "function") {
    return dispatch(type.apply(undefined, _toConsumableArray(args)));
  }
  if ((typeof type === "undefined" ? "undefined" : _typeof(type)) === "object" && type.type) {
    return dispatch(_extends({}, type, data));
  }
  return dispatch(_extends({
    type: type
  }, data));
};

var middleware = exports.middleware = function middleware(_ref) {
  var dispatch = _ref.dispatch,
      getState = _ref.getState,
      next = _ref.next,
      action = _ref.action,
      _ref$config = _ref.config,
      config = _ref$config === undefined ? {} : _ref$config;

  if (!action.hasOwnProperty(CALL_API)) {
    return next(action);
  }

  // TODO: Validate the action

  var callAPI = action[CALL_API];
  var url = callAPI.url,
      method = callAPI.method,
      data = callAPI.data,
      types = callAPI.types,
      headers = callAPI.headers;

  var _types = _slicedToArray(types, 3),
      requestType = _types[0],
      successType = _types[1],
      failureType = _types[2];

  dispatchAction(dispatch, requestType);

  return _FETCH[method || "GET"]({ url: url, data: data, headers: headers }).then(function (response) {
    return dispatchAction(dispatch, successType, {
      response: response
    }, [response]);
  }, function (error) {
    var dispatchError = function dispatchError() {
      return dispatchAction(dispatch, failureType, {
        apierror: error
      }, [error]);
    };

    // Custom error handling?
    if (config.onError) {
      return config.onError({ dispatch: dispatch, getState: getState, error: error, dispatchError: dispatchError });
    }

    return dispatchError();
  });
};

var apiMiddleware = exports.apiMiddleware = function apiMiddleware(_ref2) {
  var dispatch = _ref2.dispatch,
      getState = _ref2.getState;
  return function (next) {
    return function (action) {
      return middleware({ dispatch: dispatch, getState: getState, next: next, action: action });
    };
  };
};

// Create API middleware and pass in a custom config
var createApiMiddleware = exports.createApiMiddleware = function createApiMiddleware(config) {
  return function (_ref3) {
    var dispatch = _ref3.dispatch,
        getState = _ref3.getState;
    return function (next) {
      return function (action) {
        return middleware({ dispatch: dispatch, getState: getState, next: next, action: action, config: config });
      };
    };
  };
};

exports.default = {
  CALL_API: CALL_API,
  middleware: middleware,
  apiMiddleware: apiMiddleware,
  createApiMiddleware: createApiMiddleware
};