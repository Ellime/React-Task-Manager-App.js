import http from "@cdkglobal/react-core-http";

export const CALL_API = "__CallAPI__";

const _FETCH = {
  GET: http.get,
  POST: http.post,
  PUT: http.put,
  DELETE: http.delete,
  PATCH: http.patch
};

const dispatchAction = (dispatch, type, data, args) => {
  if (typeof type === "function") {
    return dispatch(type(...args));
  }
  if (typeof type === "object" && type.type) {
    return dispatch({
      ...type,
      ...data
    });
  }
  return dispatch({
    type,
    ...data
  });
};

export const middleware = ({
  dispatch,
  getState,
  next,
  action,
  config = {}
}) => {
  if (!action.hasOwnProperty(CALL_API)) {
    return next(action);
  }

  // TODO: Validate the action

  const callAPI = action[CALL_API];
  const { url, method, data, types, headers } = callAPI;
  const [requestType, successType, failureType] = types;

  dispatchAction(dispatch, requestType);

  return _FETCH[method || "GET"]({ url, data, headers }).then(
    response => {
      return dispatchAction(
        dispatch,
        successType,
        {
          response: response
        },
        [response]
      );
    },
    error => {
      const dispatchError = () =>
        dispatchAction(
          dispatch,
          failureType,
          {
            apierror: error
          },
          [error]
        );

      // Custom error handling?
      if (config.onError) {
        return config.onError({ dispatch, getState, error, dispatchError });
      }

      return dispatchError();
    }
  );
};

export const apiMiddleware = ({ dispatch, getState }) => next => action =>
  middleware({ dispatch, getState, next, action });

// Create API middleware and pass in a custom config
export const createApiMiddleware = config => ({
  dispatch,
  getState
}) => next => action =>
  middleware({ dispatch, getState, next, action, config });

export default {
  CALL_API,
  middleware,
  apiMiddleware,
  createApiMiddleware
};
