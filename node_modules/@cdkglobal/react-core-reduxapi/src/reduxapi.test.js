import reduxapi from "./index";

describe("apiMiddleware", () => {
  it("handles dispatch", () => {
    global.fetch = jest.fn().mockImplementationOnce(() =>
      Promise.resolve({
        status: 200,
        headers: new Headers(),
        text: () => Promise.resolve("OK")
      })
    );
    let dispatchCount = 0;
    const dispatch = action => {
      switch (++dispatchCount) {
        case 1:
          return expect(action.type).toBe("REQUEST");
        case 2:
          expect(action.response).toBe("OK");
          return expect(action.type).toBe("RECEIVE");
        default:
          throw new Error("too many");
      }
    };
    const getState = () => {};
    return reduxapi
      .apiMiddleware({ dispatch, getState })(() => {
        throw new Error("next");
      })({
        [reduxapi.CALL_API]: {
          url: "/api/fake",
          method: "GET",
          types: ["REQUEST", "RECEIVE", "ERROR"]
        }
      })
      .then(() => {
        expect(dispatchCount).toBe(2);
      });
  });

  it("supports custom error handling", () => {
    global.console.error = jest.fn();

    global.fetch = jest.fn().mockImplementationOnce(() =>
      Promise.resolve({
        status: 403,
        headers: new Headers(),
        text: () => Promise.resolve("OK")
      })
    );

    const dispatch = jest.fn();
    const getState = jest.fn();
    const onError = ({ dispatch, getState, error, dispatchError }) => {
      // Custom error handling
      expect(error.response.status).toBe(403);

      dispatch({ type: "CUSTOM_ACTION" });
      getState();
      dispatchError();
    };

    return reduxapi
      .createApiMiddleware({ onError })({ dispatch, getState })()({
        [reduxapi.CALL_API]: {
          url: "/api/fake",
          method: "GET",
          types: ["REQUEST", "RECEIVE", "ERROR"]
        }
      })
      .then(() => {
        expect(dispatch.mock.calls).toMatchSnapshot();
        expect(getState).toHaveBeenCalled();
      });
  });
});
